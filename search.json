[{"title":"Java集合详解","url":"/posts/1169821274/","content":"## 一、集合简介\n集合本质是基于某种数据结构数据容器。常见的数据结构:数组(Array)、集(Set)、队列 (Queue)、链表(Linkedlist)、树(Tree)、堆(Heap)、栈(Stack)和映射(Map)等结构。\n<!-- more --> \nJava中提供了丰富的集合接口和类，它们来自于java.util包。如图所示是Java主要的集合接口和 类，从图中可见Java集合类型分为:Collection和Map，Collection子接口有:Set、Queue和List等接口。 每一种集合接口描述了一种数据结构。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200210174542205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n在Java SE中List名称的类型有两个，一个是java.util.List，另外一个是java.awt.List。 java.util.List是一个接口，而java.awt.List是一个类，用于图形用户界面开 发，它是一个图形界面中的组件。学习Java中的集合，首先从两大接口入手，重点掌握List、Set和Map三个接口，熟悉这些接 口中提供的方法。然后再熟悉这些接口的实现类，并了解不同实现类之间的区别。\n\n## 二、List集合\nList集合中的元素是有序的，可以重复出现。List接口的实现类有:ArrayList 和 LinkedList。ArrayList是基于动态数组数据结构的实现，LinkedList 是基于链表数据结构的实现。ArrayList访问元素速度优于LinkedList，LinkedList占用的内存空间比较 大，但LinkedList在批量插入或删除数据时优于ArrayList。\n### （1）常用方法\nList接口继承自Collection接口，List接口中的很多方法都继承自Collection接口的。List接口中常用方法如下。\n01. 操作元素\nget(int index):返回List集合中指定位置的元素。\nset(int index, Object element):用指定元素替换List集合中指定位置的元素。\nadd(Object element):在List集合的尾部添加指定的元素。该方法是从Collection集合继承 过来的。\nadd(int index, Object element):在List集合的指定位置插入指定元素。 remove(int index):移除List集合中指定位置的元素。\nremove(Object element):如果List集合中存在指定元素，则从List集合中移除第一次出现的 指定元素。该方法是从Collection集合继承过来的。\nclear():从List集合中移除所有元素。该方法是从Collection集合继承过来的。\n 02. 判断元素\nisEmpty():判断List集合中是否有元素，没有返回true，有返回false。该方法是从 Collection集合继承过来的。\ncontains(Object element):判断List集合中是否包含指定元素，包含返回true，不包含返回 false。该方法是从Collection集合继承过来的。\n03. 查询元素\nindexOf(Object o):从前往后查找List集合元素，返回第一次出现指定元素的索引，如果\n此列表不包含该元素，则返回-1。\nlastIndexOf(Object o):从后往前查找List集合元素，返回第一次出现指定元素的索引，如果此列表不包含该元素，则返回-1。\n04. 其他\niterator():返回迭代器(Iterator)对象，迭代器对象用于遍历集合。该方法是从Collection 集合继承过来的。\nsize():返回List集合中的元素数，返回值是int类型。该方法是从Collection集合继承过来 的。\nsubList(int fromIndex, int toIndex):返回List集合中指定的 fromIndex(包括 )和 toIndex(不包括)之间的元素集合，返回值为List集合。\n代码如下：\n\n```java\npackage 集合.list集合;\nimport\tjava.util.ArrayList;\nimport java.util.List;\n//list集合：有序，重复\npublic class HelloWorld {\n    public static void main(String[] args) {\n//\n        List list = new ArrayList();\n        String b = \"B\";\n//       向集合中添加元素\n        list.add(\"A\");\n        list.add(b);\n        list.add(\"C\");\n        list.add(b);\n        list.add(\"D\");\n        list.add(\"E\");\n\n//        打印集合的元素个数\n        System.out.println(\"集合 size = \"+list.size());\n//        打印集合\n        System.out.println(list);\n//从前往后查找b元素\n        System.out.println(\"indexOf(\\\"B\\\") = \" +list.indexOf(b));\n//       从后往前查找\"B\"元素\n        System.out.println(\"lastindexOf(\\\"B\\\") = \" +list.lastIndexOf(b));\n        //删除集合中第一个\"B\"元素\n        list.remove(b);\n        System.out.println(\"remove(3)前: \"+list);\n        //判断集合中是否包含\"B\"元素\n        System.out.println(\"是否包含\\\"B\\\":\" + list.contains(b));\n\n        //删除集合第4个元素\n        list.remove(3);\n        System.out.println(\"remove(3)后: \" + list);\n\n        //判断集合是否为空\n        System.out.println(\"list集合是空的:\" + list.isEmpty());\n\n        System.out.println(\"替换前:\" + list); //替换集合第2个元素\n        list.set(1, \"F\");\n        System.out.println(\"替换后:\" + list);\n\n        //清空集合\n        list.clear();\n        System.out.println(list);\n\n        // 重新添加元素\n        list.add(1);// 发生自动装箱\n        list.add(3);\n        \n        int item = (Integer)list.get(0);//发生自动拆箱\n    }\n}\n```\n运行结果：\n\n```java\n集合 size = 6\n[A, B, C, B, D, E]\nindexOf(\"B\") = 1\nlastindexOf(\"B\") = 3\nremove(3)前: [A, C, B, D, E]\n是否包含\"B\":true\nremove(3)后: [A, C, B, E]\nlist集合是空的:false\n替换前:[A, C, B, E]\n替换后:[A, F, B, E]\n[]\n```\n### （2）遍历集合\n集合最常用的操作之一是遍历，遍历就是将集合中的每一个元素取出来，进行操作或计算。List集合遍历有三种方法:\n01. 使用for循环遍历:List集合可以使用for循环进行遍历，for循环中有循环变量，通过循环变量可\n以访问List集合中的元素。\n02. 使用for-each循环遍历:for-each循环是针对遍历各种类型集合而推出的，笔者推荐使用这种遍历\n方法。\n03. 使用迭代器遍历:Java提供了多种迭代器，List集合可以使用Iterator和ListIterator迭代器。\n代码如下：\n\n```java\npackage 集合.list集合遍历;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        List list = new ArrayList();\n\n        String b = \"B\";\n//       向集合中添加元素\n        list.add(\"A\");\n        list.add(b);\n        list.add(\"C\");\n        list.add(b);\n        list.add(\"D\");\n        list.add(\"E\");\n\n//        打印集合\n        System.out.println(list);\n//        for循环遍历集合\n        System.out.println(\"--1.使用for循环遍历--\");\n        for (int i = 0;i<list.size();i++){\n//            System.out.println(list.get(i));\n            System.out.printf(\"读取集合元素(%d): %s \\n\", i, list.get(i));\n        }\n        // 2.使用for-each循环遍历\n        System.out.println(\"--2.使用for-each循环遍历--\");\n        for (Object items:list){\n            String s = (String) items;\n            System.out.println(\"读取集合元素：\"+s);\n        }\n\n        // 3.使用迭代器遍历\n        System.out.println(\"--3.使用迭代器遍历--\");\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()){\n            Object items = iterator.next();\n            String s = (String)items;\n            System.out.println(\"读取集合元素：\"+s);\n        }\n    }\n}\n```\n运行结果：\n\n```java\n[A, B, C, B, D, E]\n--1.使用for循环遍历--\n读取集合元素(0): A \n读取集合元素(1): B \n读取集合元素(2): C \n读取集合元素(3): B \n读取集合元素(4): D \n读取集合元素(5): E \n--2.使用for-each循环遍历--\n读取集合元素：A\n读取集合元素：B\n读取集合元素：C\n读取集合元素：B\n读取集合元素：D\n读取集合元素：E\n--3.使用迭代器遍历--\n读取集合元素：A\n读取集合元素：B\n读取集合元素：C\n读取集合元素：B\n读取集合元素：D\n读取集合元素：E\n```\n## 二、Set集合\nSet集合是由一串无序的，不能重复的相同类型元素构成的集合。List集合强调的是有序，Set集合强调的是不重复。当不考虑顺序，且没有重复元素时，Set集合和List集 合可以互相替换的。Set接口直接实现类主要是HashSet，HashSet是基于散列表数据结构的实现。\n### （1）常用方法\nSet接口也继承自Collection接口，Set接口中大部分都是继承自Collection接口，这些方法如下。\n01. 操作元素\nadd(Object element):在Set集合的尾部添加指定的元素。该方法是从Collection集合继承过来的。\nremove(Object element):如果Set集合中存在指定元素，则从Set集合中移除该元素。该方法是从Collection集合继承过来的。\nclear():从Set集合中移除所有元素。该方法是从Collection集合继承过来的。 \n02. 判断元素\nisEmpty():判断Set集合中是否有元素，没有返回true，有返回false。该方法是从 Collection集合继承过来的。\ncontains(Object element):判断Set集合中是否包含指定元素，包含返回true，不包含返回 false。该方法是从Collection集合继承过来的。\n03. 其他\niterator():返回迭代器(Iterator)对象，迭代器对象用于遍历集合。该方法是从Collection\n集合继承过来的。\nsize():返回Set集合中的元素数，返回值是int类型。该方法是从Collection集合继承过来的。\n代码如下：\n\n```java\n//set集合：无序，不重复\nimport java.util.HashSet;\n\npublic class Set {\n    public static void main(String[] args) {\n        java.util.Set set = new HashSet();\n\n        String b = \"B\";\n// 向集合中添加元素\n        set.add(\"A\");\n        set.add(b);\n        set.add(\"C\");\n        set.add(b);\n        set.add(\"D\");\n        set.add(\"E\");\n//        打印集合个数\n        System.out.println(\"集合size = \"+set.size());\n//        打印集合\n        System.out.println(set);\n//       删除集合中的B元素\n        set.remove(b);\n//        判断集合中是否包含\"B\"元素\n        System.out.println(\"判断是否包含B元素\"+set.contains(b));\n//        判断集合是否为空\n        System.out.println(\"判断集合是否为空\"+set.isEmpty());\n//        清空集合\n        set.clear();\n        //        打印集合\n        System.out.println(set);\n    }\n}\n```\n运行结果：\n\n```java\n集合size = 5\n[A, B, C, D, E]\n判断是否包含B元素false\n判断集合是否为空false\n[]\n```\n### （2）遍历集合\nSet集合中的元素由于没有序号，所以不能使用for循环进行遍历，但可以使用for-each循环和迭代器进 行遍历。事实上这两种遍历方法也是继承自Collection集合，也就是说所有的Collection集合类型都有这 两种遍历方式。\n代码如下：\n\n```java\npublic class Bianli {\n    public static void main(String[] args) {\n        Set set = new HashSet();\n        String b = \"B\";\n// 向集合中添加元素\n        set.add(\"A\");\n        set.add(b);\n        set.add(\"C\");\n        set.add(b);\n        set.add(\"D\");\n        set.add(\"E\");\n\n        //        打印集合\n        System.out.println(set);\n//        1，使用增强for遍历\n        System.out.println(\"--1，使用增强for遍历--\");\n        for (Object item : set){\n            String s = (String)item;\n            System.out.println(s);\n        }\n//        2.使用迭代器遍历集合\n        System.out.println(\"--2.使用迭代器遍历集合--\");\n        Iterator iterator = set.iterator();\n        while (iterator.hasNext()){\n            Object item  = iterator.next();\n            String s = (String)item;\n            System.out.println(\"读取集合\"+s);\n        }\n\n    }\n}\n```\n运行结果：\n\n```java\n[A, B, C, D, E]\n--1，使用增强for遍历--\nA\nB\nC\nD\nE\n--2.使用迭代器遍历集合--\n读取集合A\n读取集合B\n读取集合C\n读取集合D\n读取集合E\n```\n## 三、Map集合\nMap(映射)集合表示一种非常复杂的集合，允许按照某个键来访问元素。Map集合是由两个集合构 成的，一个是键(key)集合，一个是值(value)集合。键集合是Set类型，因此不能有重复的元素。 而值集合是Collection类型，可以有重复的元素。Map集合中的键和值是成对出现的。Map接口直接实现类主要是HashMap，HashMap是基于散列表数据结构的实现。\n### （1）常用方法\nMap集合中包含两个集合(键和值)，所以操作起来比较麻烦，Map接口提供很多方法用来管理和操 作集合。主要的方法如下。\n01. 操作元素\nget(Object key):返回指定键所对应的值;如果Map集合中不包含该键值对，则返回null。 put(Object key, Object value):指定键值对添加到集合中。\nremove(Object key):移除键值对。\nclear():移除Map集合中所有键值对。 \n02. 判断元素\nisEmpty():判断Map集合中是否有键值对，没有返回true，有返回false。 \ncontainsKey(Object key):判断键集合中是否包含指定元素，包含返回true，不包含返回false。\ncontainsValue(Object value):判断值集合中是否包含指定元素，包含返回true，不包含返回false。\n03. 查看集合\nkeySet():返回Map中的所有键集合，返回值是Set类型。 \nvalues():返回Map中的所有值集合，返回值是Collection类型。 \nsize():返回Map集合中键值对数。\n代码如下：\n\n```java\npackage 集合.map集合;\n\nimport java.util.HashMap;\n\npublic class Map {\n    public static void main(String[] args) {\n        java.util.Map map = new HashMap();\n\n        map.put(101,\"A\");\n        map.put(102, \"B\");\n        map.put(103, \"C\");\n        map.put(104, \"D\");\n//        B重复\n        map.put(105, \"B\");\n//把102的值换成E\n        map.put(102, \"E\");\n//        打印集合\n        System.out.println(map);\n//        打印集合元素个数\n        System.out.println(\"集合size=\"+map.size());\n//        通过键取值\n        System.out.println(\"102-\"+map.get(102));\n        System.out.println(\"105-\"+map.get(105));\n//        删除键值对\n        map.remove(102);\n        System.out.println(map);\n//        判断集合中是否包含105\n        System.out.println(\"集合中是否包含102\"+map.containsKey(105));\n//        集合中是否包含\"A\"\n        System.out.println(\"集合中是否包含A\"+map.containsValue(\"A\"));\n//        判断集合是否为空\n        System.out.println(\"集合是否为空\"+map.isEmpty());\n//        清空集合\n        map.clear();\n        System.out.println(map);\n    }\n}\n```\n运行结果：\n\n```java\n{101=A, 102=E, 103=C, 104=D, 105=B}\n集合size=5\n102-E\n105-B\n{101=A, 103=C, 104=D, 105=B}\n集合中是否包含102true\n集合中是否包含Atrue\n集合是否为空false\n{}\n```\n### （2）遍历集合\nMap集合遍历与List和Set集合不同，Map有两个集合，因此遍历时可以只遍历值的集合，也可以只遍历键的集合，也可以同时遍历。这些遍历过程都可以使用for-each循环和迭代器进行遍历。\n代码如下：\n\n```java\npackage 集合.map集合遍历;\n\nimport java.util.*;\n\npublic class Mapbianli {\n    public static void main(String[] args) {\n        Map map = new HashMap();\n        map.put(101,\"A\");\n        map.put(102, \"B\");\n        map.put(103, \"C\");\n        map.put(104, \"D\");\n//        使用增强for循环遍历\n        System.out.println(\"使用增强for循环遍历\");\n//        获得键集合\n        Set keys  = map.keySet();\n        for (Object key:keys){\n//            自动拆箱\n            int ikey = (Integer) key;\n//            自动装箱\n            String value = (String)map.get(ikey);\n            System.out.printf(\"key=%d-value=%s \\n\",ikey,value);\n        }\n//        使用迭代器遍历集合\n        System.out.println(\"使用迭代器遍历集合\");\n//        获得值集合\n        Collection values = map.values();\n//        遍历值集合\n        Iterator iterator = values.iterator();\n        while (iterator.hasNext()){\n            Object item = iterator.next();\n            String s = (String)item;\n            System.out.println(\"集合元素集合:\"+s);\n        }\n    }\n}\n```\n运行结果：\n\n```java\n使用增强for循环遍历\nkey=101-value=A \nkey=102-value=B \nkey=103-value=C \nkey=104-value=D \n使用迭代器遍历集合\n集合元素集合:A\n集合元素集合:B\n集合元素集合:C\n集合元素集合:D\n```","tags":["Java"],"categories":["Java基础语法"]},{"title":"Java面试题实现线程的几种方式？","url":"/posts/3425737821/","content":"在Java面试中面试官常常会问这样一道面试题：Java面试题实现线程的几种方式？\n这道题看似简单也会难道很多人，下面总结一些实现线程的几种方式。\n<!-- more --> \n第一种：通过实现Runnable接口\n创建步骤：\n\n - 1、通过实现Runnable接口创建线程执行类 \n - 2、通过重写Runnable中的run方法，编写线程执行代码\n - 3、创建线程Thread对象，将线程执行对象传递给它 \n - 4、开始线程\n\n第二种：通过继承Thread线程类\n创建步骤：\n\n - 1、通过继承Thread线程类创建线程执行类 \n - 2、定义构造方法，通过super调用父类Thread构造方法 这两个Thread类\n   构造方法:\n   \n   Thread(String name):name为线程指定一个名字。 \n   Thread():线程名字是JVM分配的。\n   \n - 3、通过重写Thread中的run方法，编写线程执行代码 \n - 4、创建线程执行对象，将参数传递给它 \n - 5、开始线程\n\n示例代码：\n\n```java\nclass DogThread extends Thread{\n    @Override\n    public void run(){\n        System.out.println(\"dog eat\");\n    }\n}\n\nclass CatRunnable implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"cat eat\");\n    }\n}\n\npublic class TestThread {\n    public static void main(String[] args) {\n        // 方案一：\n        DogThread dogThread = new DogThread();\n        dogThread.start();\n\n        // 方案二：\n        Thread thread = new Thread(new CatRunnable());\n        thread.start();\n\n//        使用内部类写法\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"cat eat\");\n            }\n        });\n        t1.start();\n\n//        使用lambda表达式写法\n        Thread t2 = new Thread(() ->{\n            System.out.println(\"cat eat\");\n        });\n        t2.start();\n    }\n}\n```\n运行结果：\n\n```java\ndog eat\ncat eat\ncat eat\ncat eat\n```\n关于线程的更多知识点见这篇文章[https://blog.csdn.net/weixin_45366499/article/details/104346644](https://blog.csdn.net/weixin_45366499/article/details/104346644)\n","tags":["Java"],"categories":["Java面试指南"]}]