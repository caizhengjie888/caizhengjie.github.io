<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex&#39;s Blog</title>
  
  <subtitle>write code and love life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-20T08:45:50.351Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>caizhengjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HBase的应用场景及架构原理</title>
    <link href="http://yoursite.com/posts/2845542846/"/>
    <id>http://yoursite.com/posts/2845542846/</id>
    <published>2020-06-20T08:44:15.000Z</published>
    <updated>2020-06-20T08:45:50.351Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="一、HBase在实际业务场景中的应用"   >          <a href="#一、HBase在实际业务场景中的应用" class="heading-link"><i class="fas fa-link"></i></a>一、HBase在实际业务场景中的应用</h2>      <a id="more"></a><p> HBase是一个构建在HDFS上的分布式列存储系统；HBase是Apache Hadoop生态系统中的重要一员，主要用于海量结构化数据存储<br>HBase能做什么？</p><ul><li>海量数据存储</li><li>准实时查询</li></ul><p>举例说明HBase在实际业务场景中的应用</p><ul><li>交通</li><li>金融</li><li>电商</li><li>移动</li></ul>        <h2 id="二、HBase的特点"   >          <a href="#二、HBase的特点" class="heading-link"><i class="fas fa-link"></i></a>二、HBase的特点</h2>      <ul><li>容量大：HBase单表可以有百亿行，百万列，数据矩阵横向和纵向两个纬度所支持的数据量级别都非常具有弹性</li><li>稀疏性：为空的列并不占用存储空间，表可以设计的非常稀疏</li><li>多版本：HBase每一列的数据存储有多个Version</li><li>面向列：HBase是面向列的存储和权限控制，并支持独立检索。列式存储，其数据在表中是按照某列存储的，这样在查询只需要少数几个字段的时候，能大大减少读取的数据量。</li><li>扩展性：底层依赖于HDFS</li><li>高可靠性：WAL机制保证了数据写入时不会因集群异常而导致写入数据丢失：Replication机制保证了在集群出现严重的问题时，数据不会发生丢失或损坏。而HBase底层使用HDFS，HDFS本身也有备份。</li><li>高性能：底层的LSM数据结构和RowKey有序排列等架构上的独特设计，使得HBase具有非常的写入性能。region切分、主键索引和缓存机制使得HBase在海量数据下具备一定的随机读取性能，该性能针对Rowkey的查询能够达到毫秒级。</li></ul>        <h2 id="三、HBase数据模型并举例说明"   >          <a href="#三、HBase数据模型并举例说明" class="heading-link"><i class="fas fa-link"></i></a>三、HBase数据模型并举例说明</h2>              <h3 id="（1）逻辑存储模型"   >          <a href="#（1）逻辑存储模型" class="heading-link"><i class="fas fa-link"></i></a>（1）逻辑存储模型</h3>      <p><img   src="https://img-blog.csdnimg.cn/20200620144549427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/20200620144556770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/20200620145009724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/20200620145026967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br> RowKey：Hbase使用Rowkey来唯一的区分某一行的数据。<br> Column Family（列族）：Hbase通过列族划分数据的存储，列族下面可以包含任意多的列，实现灵活的数据存取。Hbase的列族不是越多越好，官方推荐的是列族最好小于或者等于3。我们使用的场景一般是1个列族。<br> Time Stamp（时间戳）：TimeStamp对Hbase来说至关重要，因为它是实现Hbase多版本的关键。在Hbase中使用不同的timestame来标识相同rowkey行对应的不通版本的数据。<br>Cell：HBase 中通过 rowkey 和 columns 确定的为一个存储单元称为 cell。每个 cell 都保存着同一份 数据的多个版本。版本通过时间戳来索引。</p>        <h3 id="（2）物理存储模型"   >          <a href="#（2）物理存储模型" class="heading-link"><i class="fas fa-link"></i></a>（2）物理存储模型</h3>      <p>Hbase的Table中的所有行都按照row key的字典序排列。Table 在行的方向上分割为多个Region。Region按大小分割的，每个表开始只有一个region，随 着数据增多，region不断增大，当增大到一个阀值的时候， region就会等分会两个新的region，之后会有越来越多的 region。<br><img   src="https://img-blog.csdnimg.cn/2020062015133549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/20200620151359707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述">Region是HBase中分布式存储和负载均衡的最小单元。 不同Region分布到不同RegionServer上。<br><img   src="https://img-blog.csdnimg.cn/20200620151423495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"> Region虽然是分布式存储的最小单元，但并不是存储 的最小单元。Region由一个或者多个Store组成，每个store保存一个 columns family。每个Strore又由一个memStore和0至多个StoreFile组成。memStore存储在内存中，StoreFile存储在HDFS上。<br><img   src="https://img-blog.csdnimg.cn/20200620151508530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"></p>        <h2 id="四、HBase基本架构"   >          <a href="#四、HBase基本架构" class="heading-link"><i class="fas fa-link"></i></a>四、HBase基本架构</h2>      <p><img src="https://img-blog.csdnimg.cn/20200620151645506.png" alt="在这里插入图片描述"><br>包括了HMaster、HRegionSever、HRegion、HLog、Store、MemStore、StoreFile、HFile等。HBase底层依赖HDFS，通过DFS Cilent进行HDFS操作。HMaster负责把HRegion分配给HRegionServer，每一个HRegionServer可以包含多个HRegion，多个HRegion共享HLog，HLog用来做灾难恢复。每一个HRegion由一个或多个Store组成，一个Store对应表的一个列族，每个Store中包含与其对应的MemStore以及一个或多个StoreFile（是实际数据存储文件HFile的轻量级封装），MemStore是在内存中的，保存了修改的数据，MemStore中的数据写到文件中就是StoreFile。</p>        <h3 id="（1）HMaster"   >          <a href="#（1）HMaster" class="heading-link"><i class="fas fa-link"></i></a>（1）HMaster</h3>      <p> HMaster的主要功能有：</p><ul><li>把HRegion分配到某一个RegionServer。</li><li>有RegionServer宕机了，HMaster可以把这台机器上的Region迁移到active的RegionServer上。</li><li>对HRegionServer进行负载均衡。</li><li>通过HDFS的dfs client接口回收垃圾文件（无效日志等）<br>注：HMaster没有单点问题，HBase中可以启动多个HMaster，通过Zookeeper的Master Election机制保证总有一个Master运行。</li></ul>        <h3 id="（2）HRegionServer"   >          <a href="#（2）HRegionServer" class="heading-link"><i class="fas fa-link"></i></a>（2）HRegionServer</h3>      <p>HRegionServer的主要功能有：</p><ul><li>维护HMaster分配给它的HRegion，处理对这些HRegion的IO请求，也就是说客户端直接和HRegionServer打交道。（从图中也能看出来）</li><li>负责切分正在运行过程中变得过大的HRegion</li></ul>        <h3 id="（3）基本架构"   >          <a href="#（3）基本架构" class="heading-link"><i class="fas fa-link"></i></a>（3）基本架构</h3>      <p>HBase构建在HDFS之上，其组件包括 Client、zookeeper、HDFS、Hmaster以及HRegionServer。Client包含访问HBase的接口，并维护cache来加快对HBase的访问。Zookeeper用来保证任何时候，集群中只有一个master，存贮所有Region的寻址入口以及实时监控Region server的上线和下线信息。并实时通知给Master存储HBase的schema和table元数据。HMaster负责为Region server分配region和Region server的负载均衡。如果发现失效的Region server并重新分配其上的region。同时，管理用户对table的增删改查操作。Region Server 负责维护region，处理对这些region的IO请求并且切分在运行过程中变得过大的region。<br><img   src="https://img-blog.csdnimg.cn/20200620152844598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>HBase 依赖ZooKeeper，默认情况下，HBase 管理ZooKeeper 实例。比如， 启动或者停止ZooKeeper。Master与RegionServers 启动时会向ZooKeeper注册。因此，Zookeeper的引入使得 Master不再是单点故障。<br><img   src="https://img-blog.csdnimg.cn/20200620152948461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br> Client每次写数据库之前，都会首先血Hlog日志。记录写操作。如果不做日志记录，一旦发生故障，操作将不可恢复。HMaster一旦故障，Zookeeper将重新选择一个新的Master 。无Master过程中，数据读取仍照常进行。但是，无master过程中，region切分、负载均衡等无法进行。RegionServer出现故障的处理原理是定时向Zookeeper汇报心跳，如果一旦时 间内未出现心跳HMaster将该RegionServer上的Region重新分配到其他RegionServer上。失效服务器上“预写”日志由主服务器进行分割并派送给新的 RegionServer 。Zookeeper是一个可靠地服务，一般配置3或5个Zookeeper实例。<br><img   src="https://img-blog.csdnimg.cn/20200620152948339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>  寻找RegionServer定位的顺序是ZooKeeper –ROOT-(单Region) -.META. -用户表 。如上图所示。-ROOT- 表包含.META.表所在的region列表，该表只会有一 个Region。 Zookeeper中记录了-ROOT-表的location。  .META. 表包含所有的用户空间region列表，以及 RegionServer的服务器地址。 </p><p>参考文章：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/9d3d388eae19?utm_source=oschina-app"  target="_blank" rel="noopener">https://www.jianshu.com/p/9d3d388eae19?utm_source=oschina-app</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/tianyeshiye/article/details/80768072"  target="_blank" rel="noopener">https://blog.csdn.net/tianyeshiye/article/details/80768072</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、HBase在实际业务场景中的应用&quot;   &gt;
          &lt;a href=&quot;#一、HBase在实际业务场景中的应用&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;一、HBase在实际业务场景中的应用&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Hadoop学习指南" scheme="http://yoursite.com/categories/Hadoop%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下HBase安装与配置（亲测！）</title>
    <link href="http://yoursite.com/posts/3651396382/"/>
    <id>http://yoursite.com/posts/3651396382/</id>
    <published>2020-06-20T08:38:11.000Z</published>
    <updated>2020-06-20T08:39:40.215Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="Centos7下Hadoop完全分布式安装"   >          <a href="#Centos7下Hadoop完全分布式安装" class="heading-link"><i class="fas fa-link"></i></a>Centos7下Hadoop完全分布式安装</h2>      <ul><li>电脑系统：macOS 10.15.4 </li><li>虚拟机软件：Parallels Desktop14 </li><li>Hadoop各节点节点操作系统：CentOS 7</li><li>JDK版本：jdk1.8.0_162 </li><li>HBase版本：hbase-1.2.0-cdh5.9.3</li></ul><p>hbase的下载源地址：<br>官网：<br><span class="exturl"><a class="exturl__link"   href="https://archive.cloudera.com/cdh5/cdh/5/"  target="_blank" rel="noopener">https://archive.cloudera.com/cdh5/cdh/5/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>CDH版本：<br><span class="exturl"><a class="exturl__link"   href="https://archive.apache.org/dist/hadoop/"  target="_blank" rel="noopener">https://archive.apache.org/dist/hadoop/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="第一步：安装软件"   >          <a href="#第一步：安装软件" class="heading-link"><i class="fas fa-link"></i></a>第一步：安装软件</h2>              <h3 id="（1）上传文件"   >          <a href="#（1）上传文件" class="heading-link"><i class="fas fa-link"></i></a>（1）上传文件</h3>      <p>将本机的安装包上传到虚拟机node1，上传方式：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 本机的文件绝对路径 caizhengjie@10.211.55.49:/opt/Hadoop</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）解压文件"   >          <a href="#（2）解压文件" class="heading-link"><i class="fas fa-link"></i></a>（2）解压文件</h3>      <p>上传成功之后需要对文件赋予权限</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x hbase-1.2.0-cdh5.9.3.tar.gz</span><br></pre></td></tr></table></div></figure><p>解压文件：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hbase-1.2.0-cdh5.9.3.tar.gz</span><br></pre></td></tr></table></div></figure><p>创建软链接：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s hbase-1.2.0-cdh5.9.3 hbase</span><br></pre></td></tr></table></div></figure>        <h2 id="第二步：配置环境变量"   >          <a href="#第二步：配置环境变量" class="heading-link"><i class="fas fa-link"></i></a>第二步：配置环境变量</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></div></figure><p>然后添加以下内容，注意三台虚拟机都需要配置环境变量</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HBASE_HOME=/opt/Hadoop/hbase</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></div></figure><p>最后使之生效</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></div></figure>        <h2 id="第三步：修改配置文件"   >          <a href="#第三步：修改配置文件" class="heading-link"><i class="fas fa-link"></i></a>第三步：修改配置文件</h2>              <h3 id="（1）修改hbase-env-sh配置文件"   >          <a href="#（1）修改hbase-env-sh配置文件" class="heading-link"><i class="fas fa-link"></i></a>（1）修改hbase-env.sh配置文件</h3>      <p><strong>第一步</strong><br>进入到conf目录下</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hadoop/hbase/conf</span><br><span class="line">vim hbase-env.sh</span><br></pre></td></tr></table></div></figure><p>找到<strong>export JAVA_HOME</strong>，将前面的<strong>#</strong>去掉<br>修改为：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/Hadoop/jdk1.8.0_162</span><br></pre></td></tr></table></div></figure><p><strong>第二步</strong><br>接着找到图中红框的部分，将它注释掉<br><img   src="https://img-blog.csdnimg.cn/20200620120557696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>原理解释： 启动hbase的时候报出警告</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed <span class="keyword">in</span> 8.0</span><br></pre></td></tr></table></div></figure><p>查看配置文件<br> #Configure PermSize. Only needed in JDK7. You can safely remove it for JDK8+<br> 这里我用的是jdk8，按照上面的操作将那两行注释掉就不会报出警告了。<br> <strong>第三步</strong><br> 找到<strong>export HBASE_MANAGES_ZK</strong>，将前面的#去掉<br> 修改为：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br></pre></td></tr></table></div></figure><p>原理解释：这里我们不用自带的zookeeper，选择用我们自己的zookeeper<br><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_45366499/article/details/106782337"  target="_blank" rel="noopener">想查看zookeeper安装的详细操作点这里！</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这样hbase-env.sh文件就配置成功了</p>        <h3 id="（2）修改hbase-site-xml配置文件"   >          <a href="#（2）修改hbase-site-xml配置文件" class="heading-link"><i class="fas fa-link"></i></a>（2）修改hbase-site.xml配置文件</h3>      <p>首先进入到/opt/Hadoop/hbase目录下</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir zookeeper-data</span><br></pre></td></tr></table></div></figure><p>创建zookeeper-data目录文件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hbase-site.xml</span><br></pre></td></tr></table></div></figure><p>添加如下内容</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">         &lt;!-- Hbase的数据保存在HDFS对应的目录下 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs://node1:8020/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 是否是分布式环境 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置ZK的地址，3个节点都启用Zookeeper --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;node1,node2,node3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 冗余度 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 主节点和从节点允许的最大时间误差 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.master.maxclockskew&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;180000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- zookeeper数据目录 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;/opt/Hadoop/hbase/zookeeper-data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;!-- 设置网页端口号 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.master.info.port&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;60010&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></div></figure><p>根据自己的配置适当修改</p>        <h3 id="（3）修改regionservers-文件"   >          <a href="#（3）修改regionservers-文件" class="heading-link"><i class="fas fa-link"></i></a>（3）修改regionservers 文件</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hadoop/hbase/conf</span><br><span class="line">vim regionservers</span><br></pre></td></tr></table></div></figure><p>将下面的内容换成</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></div></figure>        <h3 id="（4）配置backup-masters-（可选）"   >          <a href="#（4）配置backup-masters-（可选）" class="heading-link"><i class="fas fa-link"></i></a>（4）配置backup-masters （可选）</h3>      <p>为了增加hbase集群的可用性，可以为hbase增加多个backup master。当master挂掉后，backup master可以自动接管整个hbase的集群。配置backup master的方式是在hbase的conf下增加文件backup-masters，在该文件里面增加backup master的机器列表，每台机器一条记录。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hadoop/hbase/conf</span><br><span class="line">touch backup-masters</span><br></pre></td></tr></table></div></figure><p>在里面添加内容</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node2</span><br></pre></td></tr></table></div></figure>        <h2 id="第四步：分发配置文件"   >          <a href="#第四步：分发配置文件" class="heading-link"><i class="fas fa-link"></i></a>第四步：分发配置文件</h2>      <p>将node1的hbase-1.2.0-cdh5.9.3和hbase-1.2.0-cdh5.9.3.tar.gz文件分发到node2和node3上</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r hbase-1.2.0-cdh5.9.3 hbase-1.2.0-cdh5.9.3.tar.gz caizhengjie@node2:/opt/Hadoop/</span><br><span class="line">scp -r hbase-1.2.0-cdh5.9.3 hbase-1.2.0-cdh5.9.3.tar.gz caizhengjie@node3:/opt/Hadoop/</span><br></pre></td></tr></table></div></figure><p>分别在node2和node3上创建软连接</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s hbase-1.2.0-cdh5.9.3 hbase</span><br></pre></td></tr></table></div></figure>        <h2 id="第五步：启动与检测"   >          <a href="#第五步：启动与检测" class="heading-link"><i class="fas fa-link"></i></a>第五步：启动与检测</h2>      <p>在启动HBase之前要先把三台机的zookeeper给启动起来，不然会出现刚启动hbase的进程就消失，我通过查看日志文件，找出的原因是zookeeper没有启动。报错信息如下：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">020-06-20 11:31:30,550 INFO  [main-SendThread(node1:2181)] zookeeper.ClientCnxn: Opening socket connection to server node1/10.211.55.59:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">2020-06-20 11:31:30,550 WARN  [main-SendThread(node1:2181)] zookeeper.ClientCnxn: Session 0x0 <span class="keyword">for</span> server null, unexpected error, closing socket connection and attempting reconnect</span><br><span class="line">java.net.ConnectException: 拒绝连接</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)</span><br><span class="line">at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn<span class="variable">$SendThread</span>.run(ClientCnxn.java:1081)</span><br><span class="line">2020-06-20 11:31:30,652 INFO  [main-SendThread(node2:2181)] zookeeper.ClientCnxn: Opening socket connection to server node2/10.211.55.60:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">2020-06-20 11:31:30,652 ERROR [main] zookeeper.RecoverableZooKeeper: ZooKeeper create failed after 4 attempts</span><br><span class="line">2020-06-20 11:31:30,652 ERROR [main] master.HMasterCommandLine: Master exiting</span><br><span class="line">java.lang.RuntimeException: Failed construction of Master: class org.apache.hadoop.hbase.master.HMaster. </span><br><span class="line">at org.apache.hadoop.hbase.master.HMaster.constructMaster(HMaster.java:2486)</span><br><span class="line">at org.apache.hadoop.hbase.master.HMasterCommandLine.startMaster(HMasterCommandLine.java:231)</span><br><span class="line">at org.apache.hadoop.hbase.master.HMasterCommandLine.run(HMasterCommandLine.java:137)</span><br><span class="line">at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:70)</span><br><span class="line">at org.apache.hadoop.hbase.util.ServerCommandLine.doMain(ServerCommandLine.java:127)</span><br><span class="line">at org.apache.hadoop.hbase.master.HMaster.main(HMaster.java:2496)</span><br><span class="line">Caused by: org.apache.hadoop.hbase.ZooKeeperConnectionException: master:600000x0, quorum=node1:2181,node2:2181,node3:2181, baseZNode=/hbase Unexpected KeeperException creating base node</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher.createBaseZNodes(ZooKeeperWatcher.java:206)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher.&lt;init&gt;(ZooKeeperWatcher.java:187)</span><br><span class="line">at org.apache.hadoop.hbase.regionserver.HRegionServer.&lt;init&gt;(HRegionServer.java:594)</span><br><span class="line">at org.apache.hadoop.hbase.master.HMaster.&lt;init&gt;(HMaster.java:420)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at org.apache.hadoop.hbase.master.HMaster.constructMaster(HMaster.java:2479)</span><br><span class="line">... 5 more</span><br><span class="line">Caused by: org.apache.zookeeper.KeeperException<span class="variable">$ConnectionLossException</span>: KeeperErrorCode = ConnectionLoss <span class="keyword">for</span> /hbase</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:99)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:51)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:783)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.createNonSequential(RecoverableZooKeeper.java:565)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper.create(RecoverableZooKeeper.java:544)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZKUtil.createWithParents(ZKUtil.java:1204)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZKUtil.createWithParents(ZKUtil.java:1182)</span><br><span class="line">at org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher.createBaseZNodes(ZooKeeperWatcher.java:194)</span><br><span class="line">... 13 more</span><br></pre></td></tr></table></div></figure><p>下面开始启动HBase，在node1上输入命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br></pre></td></tr></table></div></figure><p>查看jps<br>node1会出现：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[caizhengjie@node1 ~]$ jps</span><br><span class="line">2769 SecondaryNameNode</span><br><span class="line">4804 QuorumPeerMain</span><br><span class="line">4984 HMaster</span><br><span class="line">6202 Jps</span><br><span class="line">2475 NameNode</span><br><span class="line">5244 HRegionServer</span><br><span class="line">2606 DataNode</span><br></pre></td></tr></table></div></figure><p>node2会出现：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[caizhengjie@node2 Hadoop]$ jps</span><br><span class="line">3427 HRegionServer</span><br><span class="line">2215 DataNode</span><br><span class="line">3659 HMaster</span><br><span class="line">3340 QuorumPeerMain</span><br><span class="line">4302 Jps</span><br></pre></td></tr></table></div></figure><p>node3会出现：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[caizhengjie@node3 logs]$ jps</span><br><span class="line">2784 QuorumPeerMain</span><br><span class="line">3431 Jps</span><br><span class="line">2027 DataNode</span><br><span class="line">2878 HRegionServer</span><br></pre></td></tr></table></div></figure><p>则表示HBase安装成功，这里有的人会发现我的node1和node2出现了两个HMaster，因为我设置了backup-masters。</p><p>下面我来访问一下网页：<span class="exturl"><a class="exturl__link"   href="http://10.211.55.59:60010/master-status"  target="_blank" rel="noopener">http://10.211.55.59:60010/master-status</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><img   src="https://img-blog.csdnimg.cn/20200620124248608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br><img   src="https://img-blog.csdnimg.cn/20200620124248604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>一切正常！</p>        <h2 id="第六步：常见问题"   >          <a href="#第六步：常见问题" class="heading-link"><i class="fas fa-link"></i></a>第六步：常见问题</h2>      <p>在启动HBase的过程中会出现一些问题，不过也不要被这些问题吓到，通过查看日志文件，都是可以找到解决方案的。<br><strong>我遇到的第一个问题：No space left on device</strong><br>意思是磁盘空间不够，之前我安装的Hadoop，Hbase都是安装在/home/caizhengjie/目录下面的，但是随着文件数量新增，出现了磁盘空间不够，我通过<code>df -h</code>命令查看磁盘空间，果然不够<br><img   src="https://img-blog.csdnimg.cn/20200620125002744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>由图片可以看出home目录下的磁盘空间只有2.6G，而根目录下的空间有27G，因为是虚拟机，所以我可以在后面继续扩磁盘空间。因此我只好把Hadoop那些文件全部转移到/opt/目录下，这下就解决了磁盘不足的问题。</p><p><strong>我遇到的第二个问题：运行HBase报SLF4J: Class path contains multiple SLF4J bindings</strong><br>主要原因是slf4j-log4j12.jar包和Hadoop中的slf4j-log4j12.jar包冲突导致的<br>解决方法是将/opt/Hadoop/hbase/lib中的slf4j-log4j12.jar包删除即可，但是不要将三台机的slf4j-log4j12.jar包都给删掉，不然又会报错：<strong>Failed to load class org.slf4j.impl.StaticLoggerBinder</strong>，我是把node1和node2的给删除掉了，留下node3</p><p>参考文章：</p><ul><li>解决slf4j问题</li><li><span class="exturl"><a class="exturl__link"   href="http://www.slf4j.org/codes.html"  target="_blank" rel="noopener">http://www.slf4j.org/codes.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>解决Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed in 8.0问题</li><li><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/QuestionsZhang/p/10281839.html"  target="_blank" rel="noopener">https://www.cnblogs.com/QuestionsZhang/p/10281839.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>解决SLF4J: Class path contains multiple SLF4J bindings问题</li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_27575895/article/details/90238240"  target="_blank" rel="noopener">https://blog.csdn.net/qq_27575895/article/details/90238240</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>解决HBase安装问题</li><li><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/ecae88481db2"  target="_blank" rel="noopener">https://www.jianshu.com/p/ecae88481db2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>解决Linux磁盘空间不足的问题</li><li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/u010455714/article/details/77711834"  target="_blank" rel="noopener">https://blog.csdn.net/u010455714/article/details/77711834</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a>总结</h2>      <p>对于新手安装HBase来说，就是照着其他的模版来也未必能不踩坑的顺利安装好，这里我就总结两点经验。第一：坚持！一定要坚持！行百里者半九十。第二：一定要多看日志文件！这一点非常重要，因为并不是所有的报错信息在网上都能找到，只有看到报错信息才能知道哪里的问题。通常对于小白来说，什么是日志信息？日志信息说白了就是所有的报错信都在日志信息里面。<br>如何查看日志信息？通常来说可以使用more或cat命令，日志信息在/opt/Hadoop/hbase/logs目录下<br>可以通过下面的命令来查看日志信息</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat hbase-caizhengjie-master-node1.log</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        &lt;h2 id=&quot;Centos7下Hadoop完全分布式安装&quot;   &gt;
          &lt;a href=&quot;#Centos7下Hadoop完全分布式安装&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;C
      
    
    </summary>
    
    
      <category term="Hadoop学习指南" scheme="http://yoursite.com/categories/Hadoop%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Centos下ZooKeeper安装部署配置（集群模式）</title>
    <link href="http://yoursite.com/posts/4170185227/"/>
    <id>http://yoursite.com/posts/4170185227/</id>
    <published>2020-06-20T07:38:30.000Z</published>
    <updated>2020-06-20T08:35:06.573Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="第一步：准备文件"   >          <a href="#第一步：准备文件" class="heading-link"><i class="fas fa-link"></i></a>第一步：准备文件</h2>      <a id="more"></a>        <h3 id="（1）上传文件"   >          <a href="#（1）上传文件" class="heading-link"><i class="fas fa-link"></i></a>（1）上传文件</h3>      <p>将zookeeper压缩文件上传至node1中，Mac系统上传方式可以直接通过终端scp命令，Windows系统可以通过其他的上传工具。上传方式为：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /自己电脑本机路径/zookeeper-3.4.13.tar.gz caizhengjie@10.211.55.59:/opt/Hadoop</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）解压文件"   >          <a href="#（2）解压文件" class="heading-link"><i class="fas fa-link"></i></a>（2）解压文件</h3>      <p>上传成功之后需要对文件赋予权限</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></div></figure><p>解压文件：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></div></figure><p>创建软链接：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s zookeeper-3.4.13 zookeeper</span><br></pre></td></tr></table></div></figure>        <h2 id="第二步：修改配置文件"   >          <a href="#第二步：修改配置文件" class="heading-link"><i class="fas fa-link"></i></a>第二步：修改配置文件</h2>              <h3 id="（1）重命名文件"   >          <a href="#（1）重命名文件" class="heading-link"><i class="fas fa-link"></i></a>（1）重命名文件</h3>      <p>在安装zookeeper的时候我们要去修改zookeeper预装是conf目录下面的zoo_sample.cfg这个文件，首先我们要做的事就是重命名这个文件。在目录/opt/Hadoop/zookeeper/conf下，将zoo_sample.cfg改名为zoo.cfg文件，这一步<strong>非常重要</strong>，不修改的话会出现下面的问题：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/caizhengjie/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">grep: /home/caizhengjie/zookeeper/bin/../conf/zoo.cfg: 没有那个文件或目录</span><br><span class="line">mkdir: 无法创建目录<span class="string">""</span>: 没有那个文件或目录</span><br><span class="line">Starting zookeeper ... /home/caizhengjie/zookeeper/bin/zkServer.sh:行149: /zookeeper_server.pid: 权限不够</span><br><span class="line">FAILED TO WRITE PID</span><br></pre></td></tr></table></div></figure><p>这是第一个坑！<br>则我们需要修改文件名：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv zoo_sample.cfg  zoo.cfg</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）创建tmp文件夹"   >          <a href="#（2）创建tmp文件夹" class="heading-link"><i class="fas fa-link"></i></a>（2）创建tmp文件夹</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hadoop/zookeeper/</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir tmp</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tmp</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br></pre></td></tr></table></div></figure>        <h3 id="（3）创建myid文件"   >          <a href="#（3）创建myid文件" class="heading-link"><i class="fas fa-link"></i></a>（3）创建myid文件</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Hadoop/zookeeper/tmp/data</span><br><span class="line">vim myid</span><br></pre></td></tr></table></div></figure><p>第一台主机node1添加内容：1<br><strong>注意：一定要在刚才创建的data文件夹下在创建myid</strong><br>如果直接在tmp文件夹下直接创建myid文件，查看zookeeper.out日志文件会报错</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: /opt/Hadoop/zookeeper/tmp/data/myid file is missing</span><br></pre></td></tr></table></div></figure><p>这是第二个坑！</p>        <h3 id="（4）修改配置文件"   >          <a href="#（4）修改配置文件" class="heading-link"><i class="fas fa-link"></i></a>（4）修改配置文件</h3>      <p>修改zookeeper/conf下zoo.cfg文件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment">#The number of ticks that the initial </span></span><br><span class="line"><span class="comment">#synchronization phase can take</span></span><br><span class="line">initLimit=5</span><br><span class="line"><span class="comment">#The number of ticks that can pass between </span></span><br><span class="line"><span class="comment">#sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=2</span><br><span class="line"><span class="comment">#the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment">#do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment">#example sakes.</span></span><br><span class="line"><span class="comment">#**这个地方填写自己的路径**</span></span><br><span class="line">dataDir=/opt/Hadoop/zookeeper/tmp/data</span><br><span class="line"><span class="comment">#the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment">#the maximum number of client connections.</span></span><br><span class="line"><span class="comment">#increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60 </span></span><br><span class="line"><span class="comment">#服务器名称与地址:集群信息(服务器编号、服务器编号、服务器地址、LF通信端口、选举端口)</span></span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></div></figure>        <h2 id="第三步：配置环境变量"   >          <a href="#第三步：配置环境变量" class="heading-link"><i class="fas fa-link"></i></a>第三步：配置环境变量</h2>      <p>配置环境变量：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></div></figure><p>添加下面内容：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/Hadoop/zookeeper</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></div></figure><p>这里需要根据自己安装的路径来填写<br>使之生效： </p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></div></figure>        <h2 id="第四步：分发文件"   >          <a href="#第四步：分发文件" class="heading-link"><i class="fas fa-link"></i></a>第四步：分发文件</h2>              <h3 id="（1）分发文件"   >          <a href="#（1）分发文件" class="heading-link"><i class="fas fa-link"></i></a>（1）分发文件</h3>      <p>在node1配置好文件之后，需要将文件分发到node2，node3机器下面。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r zookeeper zookeeper-3.4.13 zookeeper-3.4.13.tar.gz caizhengjie@node2:/opt/Hadoop/</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r zookeeper zookeeper-3.4.13 zookeeper-3.4.13.tar.gz caizhengjie@node3:/opt/Hadoop/</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）2、3机配置环境变量"   >          <a href="#（2）2、3机配置环境变量" class="heading-link"><i class="fas fa-link"></i></a>（2）2、3机配置环境变量</h3>      <p>参考node1的配置方法</p>        <h3 id="（3）修改myid文件"   >          <a href="#（3）修改myid文件" class="heading-link"><i class="fas fa-link"></i></a>（3）修改myid文件</h3>      <p>前面在/opt/Hadoop/zookeeper/tmp/data/myid文件中，第一台主机添加内容：1<br>则在node2和node3中分别按下面修改<br>第二台主机添加内容：2<br>第三台主机添加内容：3</p>        <h2 id="第五步：启动与查看运行状态"   >          <a href="#第五步：启动与查看运行状态" class="heading-link"><i class="fas fa-link"></i></a>第五步：启动与查看运行状态</h2>      <p>按照上面的步骤全部配置完成之后，可以启动zookeeper<br>启动命令(三台机同时启动)：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></div></figure><p>关闭命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></div></figure><p>出现下面的情况则安装成功</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/Hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></div></figure><p>检验jps进程</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4616 Jps</span><br><span class="line">2041 QuorumPeerMain</span><br></pre></td></tr></table></div></figure><p>查看运行状态（三台机同时）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></div></figure><p>node1</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/Hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></div></figure><p>node2</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/Hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></div></figure><p>node3</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/Hadoop/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></div></figure><p>会发现其中有一台机器是leader，其他两台机器是follower<br>到这里zookeeper集群模式就安装成功了！</p><p>总结：如果运行出错，多看zookeeper.out日志文件</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一步：准备文件&quot;   &gt;
          &lt;a href=&quot;#第一步：准备文件&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;第一步：准备文件&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Hadoop学习指南" scheme="http://yoursite.com/categories/Hadoop%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop常用命令</title>
    <link href="http://yoursite.com/posts/2985237682/"/>
    <id>http://yoursite.com/posts/2985237682/</id>
    <published>2020-06-14T14:31:16.000Z</published>
    <updated>2020-06-14T14:42:26.345Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="一、前述"   >          <a href="#一、前述" class="heading-link"><i class="fas fa-link"></i></a>一、前述</h2>              <h3 id="（1）启动Hadoop所有进程"   >          <a href="#（1）启动Hadoop所有进程" class="heading-link"><i class="fas fa-link"></i></a>（1）启动Hadoop所有进程</h3>      <p><strong>start-all.sh等价于start-dfs.sh + start-yarn.sh</strong></p><a id="more"></a><p>但是一般不推荐使用start-all.sh(因为开源框架中内部命令启动有很多问题)。</p>        <h3 id="（2）单进程启动"   >          <a href="#（2）单进程启动" class="heading-link"><i class="fas fa-link"></i></a>（2）单进程启动</h3>      <p>启动HDFS：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop-daemons.sh --config .. --hostname .. start namenode ...</span><br><span class="line">   sbin/hadoop-daemons.sh --config .. --hostname .. start datanode ...</span><br><span class="line">   sbin/hadoop-daemons.sh --config .. --hostname .. start sescondarynamenode ...</span><br><span class="line">   sbin/hadoop-daemons.sh --config .. --hostname .. start zkfc ...         //</span><br></pre></td></tr></table></div></figure><p>启动YARN：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libexec/yarn-config.sh</span><br><span class="line">   sbin/yarn-daemon.sh --config <span class="variable">$YARN_CONF_DIR</span>  start resourcemanager</span><br><span class="line">   sbin/yarn-daemons.sh  --config <span class="variable">$YARN_CONF_DIR</span>  start nodemanager</span><br></pre></td></tr></table></div></figure>        <h3 id="（3）关闭Hadoop所有进程"   >          <a href="#（3）关闭Hadoop所有进程" class="heading-link"><i class="fas fa-link"></i></a>（3）关闭Hadoop所有进程</h3>      <p>关闭Hadoop服务：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></div></figure>        <h3 id="（4）格式化"   >          <a href="#（4）格式化" class="heading-link"><i class="fas fa-link"></i></a>（4）格式化</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></div></figure>        <h2 id="二、常用命令"   >          <a href="#二、常用命令" class="heading-link"><i class="fas fa-link"></i></a>二、常用命令</h2>              <h3 id="（1）查看指定目录下内容"   >          <a href="#（1）查看指定目录下内容" class="heading-link"><i class="fas fa-link"></i></a>（1）查看指定目录下内容</h3>      <p>hdfs dfs –ls [文件目录]</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls -R  [文件目录]        //显式目录结构</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls -d  [文件目录]          //返回的是path</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls -h  [文件目录]          //h指的是“human-readable”，按照人性化的单位显示文件大小</span><br></pre></td></tr></table></div></figure><p>eg：hdfs dfs –ls /user/wangkai.pt</p>        <h3 id="（2）查看某个文件"   >          <a href="#（2）查看某个文件" class="heading-link"><i class="fas fa-link"></i></a>（2）查看某个文件</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs –cat [file_path]</span><br></pre></td></tr></table></div></figure><p> eg:hdfs dfs -cat /user/wangkai.pt/data.txt</p>        <h3 id="（3）创建文件夹"   >          <a href="#（3）创建文件夹" class="heading-link"><i class="fas fa-link"></i></a>（3）创建文件夹</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir [文件夹名称]//父目录存在的情况下</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir -p [文件夹名称]   //父目录不存在（首先会创建父目录）</span><br></pre></td></tr></table></div></figure>        <h3 id="（4）新建文件"   >          <a href="#（4）新建文件" class="heading-link"><i class="fas fa-link"></i></a>（4）新建文件</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -touchz &lt;paths&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="（5）将本地文件夹存储至HDFS"   >          <a href="#（5）将本地文件夹存储至HDFS" class="heading-link"><i class="fas fa-link"></i></a>（5）将本地文件夹存储至HDFS</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put [-f] [-p] [本地目录] [hdfs目录]</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -copyFromLocal [-f] [-p] [-l] [本地目录] [hdfs目录]</span><br></pre></td></tr></table></div></figure><p>put 或 copyFromLocal命令是将本地文件上传到HDFS。</p>        <h3 id="（6）将本地文件移动到HDFS"   >          <a href="#（6）将本地文件移动到HDFS" class="heading-link"><i class="fas fa-link"></i></a>（6）将本地文件移动到HDFS</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -moveFromLocal [本地目录] [hdfs目录]</span><br></pre></td></tr></table></div></figure><p>使用这个命令，本地文件会被删除，移到了hdfs上</p>        <h3 id="（7）下载文件"   >          <a href="#（7）下载文件" class="heading-link"><i class="fas fa-link"></i></a>（7）下载文件</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -get [-p] [hdfs文件目录] [本地目录]</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -copyToLocal [-p] [-ignoreCrc] [-crc] [hdfs文件目录] [本地目录]</span><br></pre></td></tr></table></div></figure><p>get 或 copyToLocal 命令把文件从分布式系统复制到本地</p>        <h3 id="（8）删除hadoop上指定文件或目录"   >          <a href="#（8）删除hadoop上指定文件或目录" class="heading-link"><i class="fas fa-link"></i></a>（8）删除hadoop上指定文件或目录</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs  dfs –rm [hdfs文件地址]</span><br></pre></td></tr></table></div></figure><p>eg：hdfs dfs –rm /user/t/ok.txt</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -rm [-f] [-r] [hdfs文件目录]</span><br></pre></td></tr></table></div></figure><p>-f：如果要删除的文件不存在，不显示错误信息。<br>-r/R：级联删除目录下的所有文件和子目录文件。</p>        <h3 id="（9）将hadoop上某个文件重命名"   >          <a href="#（9）将hadoop上某个文件重命名" class="heading-link"><i class="fas fa-link"></i></a>（9）将hadoop上某个文件重命名</h3>      <p>使用mv命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs –mv  /user/test.txt  /user/ok.txt   （将test.txt重命名为ok.txt）</span><br></pre></td></tr></table></div></figure>        <h3 id="（10）显示占用的磁盘空间大小"   >          <a href="#（10）显示占用的磁盘空间大小" class="heading-link"><i class="fas fa-link"></i></a>（10）显示占用的磁盘空间大小</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -du [-s] [-h] &lt;path&gt;</span><br></pre></td></tr></table></div></figure><p>按字节显示目录所占空间的大小。-s指的是显示指定目录下的文件总的大小，-h指的是“human-readable”，按照人性化的单位显示文件大小。</p>        <h3 id="（11）HDFS中的文件复制"   >          <a href="#（11）HDFS中的文件复制" class="heading-link"><i class="fas fa-link"></i></a>（11）HDFS中的文件复制</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -cp [-f] [-p | -p[topax]] [本地目录] [hdfs目录]</span><br></pre></td></tr></table></div></figure><p>-f：如果目录文件存在，将强行覆盖。<br>-p：将保存文件的属性。</p>        <h3 id="（12）统计"   >          <a href="#（12）统计" class="heading-link"><i class="fas fa-link"></i></a>（12）统计</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -count [-q] [-h] &lt;path&gt;</span><br></pre></td></tr></table></div></figure><p>统计某个目录下的子目录与文件的个数及大小。统计结果包含目录数、文件数、文件大小。</p>        <h3 id="（13）HDFS中的文件合并后下载到本地"   >          <a href="#（13）HDFS中的文件合并后下载到本地" class="heading-link"><i class="fas fa-link"></i></a>（13）HDFS中的文件合并后下载到本地</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -getmerge [-nl] [hdfs文件目录] [本地目录]</span><br></pre></td></tr></table></div></figure>        <h3 id="（14）将正在运行的hadoop作业kill掉"   >          <a href="#（14）将正在运行的hadoop作业kill掉" class="heading-link"><i class="fas fa-link"></i></a>（14）将正在运行的hadoop作业kill掉</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop job –<span class="built_in">kill</span>  [job-id]</span><br></pre></td></tr></table></div></figure>        <h3 id="（15）安全模式"   >          <a href="#（15）安全模式" class="heading-link"><i class="fas fa-link"></i></a>（15）安全模式</h3>      <p>安全模式(Safemode)是HDFS所处的一种特殊状态。处于这种状态时，HDFS只接受读数据请求，不能对文件进行写、删除等操作。<br>a 查看当前状态</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode get</span><br></pre></td></tr></table></div></figure><p>b 进入安全模式</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode enter</span><br></pre></td></tr></table></div></figure><p>c 强制离开安全模式</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></div></figure><p>d 一直等待，知道安全模式结束</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode <span class="built_in">wait</span></span><br></pre></td></tr></table></div></figure>        <h3 id="（16）查看帮助"   >          <a href="#（16）查看帮助" class="heading-link"><i class="fas fa-link"></i></a>（16）查看帮助</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">help</span></span><br></pre></td></tr></table></div></figure>        <h3 id="（17）设置扩展属性"   >          <a href="#（17）设置扩展属性" class="heading-link"><i class="fas fa-link"></i></a>（17）设置扩展属性</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -setfattr &#123;-n name [-v value] | -x name&#125; &lt;path&gt;</span><br></pre></td></tr></table></div></figure><p>其中，采用hdfs dfs -setfattr -n name [-v value] | -x name <path> 可以设置属性。<br>采用hdfs dfs -setfattr -x name <path>可以删除属性。<br>-n：指定属性名称（设置属性时用）<br>-v：指定属性值<br>-x：指定属性的名称（删除属性时用）</p>        <h3 id="（18）获取扩展属性"   >          <a href="#（18）获取扩展属性" class="heading-link"><i class="fas fa-link"></i></a>（18）获取扩展属性</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -getfattr [-R] &#123;-n name [-v value] | -x name&#125; &lt;path&gt;</span><br></pre></td></tr></table></div></figure><p>-n：指定属性名称<br>-d：指定dump，即显示所有属性<br>-e：指encoding，包含text、hex、base64等。</p>        <h3 id="（19）HDFS管理命令"   >          <a href="#（19）HDFS管理命令" class="heading-link"><i class="fas fa-link"></i></a>（19）HDFS管理命令</h3>      <p><strong>报告文件系统的基本信息和统计信息</strong></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></div></figure><p><strong>查看拓扑</strong></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -printTopology</span><br></pre></td></tr></table></div></figure><p>以上命令基本上为Hadoop的常用命令，除此之外均为其他命令。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前述&quot;   &gt;
          &lt;a href=&quot;#一、前述&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;一、前述&lt;/h2&gt;
      
        &lt;h3 id=&quot;（1）启动Hadoop所有进程&quot;   &gt;
          &lt;a href=&quot;#（1）启动Hadoop所有进程&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;（1）启动Hadoop所有进程&lt;/h3&gt;
      &lt;p&gt;&lt;strong&gt;start-all.sh等价于start-dfs.sh + start-yarn.sh&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hadoop学习指南" scheme="http://yoursite.com/categories/Hadoop%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Java集合详解</title>
    <link href="http://yoursite.com/posts/1169821274/"/>
    <id>http://yoursite.com/posts/1169821274/</id>
    <published>2020-06-08T13:53:14.000Z</published>
    <updated>2020-06-08T14:08:19.174Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="一、集合简介"   >          <a href="#一、集合简介" class="heading-link"><i class="fas fa-link"></i></a>一、集合简介</h2>      <p>集合本质是基于某种数据结构数据容器。常见的数据结构:数组(Array)、集(Set)、队列 (Queue)、链表(Linkedlist)、树(Tree)、堆(Heap)、栈(Stack)和映射(Map)等结构。</p><a id="more"></a> <p>Java中提供了丰富的集合接口和类，它们来自于java.util包。如图所示是Java主要的集合接口和 类，从图中可见Java集合类型分为:Collection和Map，Collection子接口有:Set、Queue和List等接口。 每一种集合接口描述了一种数据结构。<br><img   src="https://img-blog.csdnimg.cn/20200210174542205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>在Java SE中List名称的类型有两个，一个是java.util.List，另外一个是java.awt.List。 java.util.List是一个接口，而java.awt.List是一个类，用于图形用户界面开 发，它是一个图形界面中的组件。学习Java中的集合，首先从两大接口入手，重点掌握List、Set和Map三个接口，熟悉这些接 口中提供的方法。然后再熟悉这些接口的实现类，并了解不同实现类之间的区别。</p>        <h2 id="二、List集合"   >          <a href="#二、List集合" class="heading-link"><i class="fas fa-link"></i></a>二、List集合</h2>      <p>List集合中的元素是有序的，可以重复出现。List接口的实现类有:ArrayList 和 LinkedList。ArrayList是基于动态数组数据结构的实现，LinkedList 是基于链表数据结构的实现。ArrayList访问元素速度优于LinkedList，LinkedList占用的内存空间比较 大，但LinkedList在批量插入或删除数据时优于ArrayList。</p>        <h3 id="（1）常用方法"   >          <a href="#（1）常用方法" class="heading-link"><i class="fas fa-link"></i></a>（1）常用方法</h3>      <p>List接口继承自Collection接口，List接口中的很多方法都继承自Collection接口的。List接口中常用方法如下。<br>01. 操作元素<br>get(int index):返回List集合中指定位置的元素。<br>set(int index, Object element):用指定元素替换List集合中指定位置的元素。<br>add(Object element):在List集合的尾部添加指定的元素。该方法是从Collection集合继承 过来的。<br>add(int index, Object element):在List集合的指定位置插入指定元素。 remove(int index):移除List集合中指定位置的元素。<br>remove(Object element):如果List集合中存在指定元素，则从List集合中移除第一次出现的 指定元素。该方法是从Collection集合继承过来的。<br>clear():从List集合中移除所有元素。该方法是从Collection集合继承过来的。<br> 02. 判断元素<br>isEmpty():判断List集合中是否有元素，没有返回true，有返回false。该方法是从 Collection集合继承过来的。<br>contains(Object element):判断List集合中是否包含指定元素，包含返回true，不包含返回 false。该方法是从Collection集合继承过来的。<br>03. 查询元素<br>indexOf(Object o):从前往后查找List集合元素，返回第一次出现指定元素的索引，如果<br>此列表不包含该元素，则返回-1。<br>lastIndexOf(Object o):从后往前查找List集合元素，返回第一次出现指定元素的索引，如果此列表不包含该元素，则返回-1。<br>04. 其他<br>iterator():返回迭代器(Iterator)对象，迭代器对象用于遍历集合。该方法是从Collection 集合继承过来的。<br>size():返回List集合中的元素数，返回值是int类型。该方法是从Collection集合继承过来 的。<br>subList(int fromIndex, int toIndex):返回List集合中指定的 fromIndex(包括 )和 toIndex(不包括)之间的元素集合，返回值为List集合。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.list集合;</span><br><span class="line"><span class="keyword">import</span>java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//list集合：有序，重复</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">//       向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"C"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"D"</span>);</span><br><span class="line">        list.add(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        打印集合的元素个数</span></span><br><span class="line">        System.out.println(<span class="string">"集合 size = "</span>+list.size());</span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//从前往后查找b元素</span></span><br><span class="line">        System.out.println(<span class="string">"indexOf(\"B\") = "</span> +list.indexOf(b));</span><br><span class="line"><span class="comment">//       从后往前查找"B"元素</span></span><br><span class="line">        System.out.println(<span class="string">"lastindexOf(\"B\") = "</span> +list.lastIndexOf(b));</span><br><span class="line">        <span class="comment">//删除集合中第一个"B"元素</span></span><br><span class="line">        list.remove(b);</span><br><span class="line">        System.out.println(<span class="string">"remove(3)前: "</span>+list);</span><br><span class="line">        <span class="comment">//判断集合中是否包含"B"元素</span></span><br><span class="line">        System.out.println(<span class="string">"是否包含\"B\":"</span> + list.contains(b));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合第4个元素</span></span><br><span class="line">        list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"remove(3)后: "</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断集合是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"list集合是空的:"</span> + list.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"替换前:"</span> + list); <span class="comment">//替换集合第2个元素</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">"F"</span>);</span><br><span class="line">        System.out.println(<span class="string">"替换后:"</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空集合</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新添加元素</span></span><br><span class="line">        list.add(<span class="number">1</span>);<span class="comment">// 发生自动装箱</span></span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> item = (Integer)list.get(<span class="number">0</span>);<span class="comment">//发生自动拆箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">集合 size = <span class="number">6</span></span><br><span class="line">[A, B, C, B, D, E]</span><br><span class="line">indexOf(<span class="string">"B"</span>) = <span class="number">1</span></span><br><span class="line">lastindexOf(<span class="string">"B"</span>) = <span class="number">3</span></span><br><span class="line">remove(<span class="number">3</span>)前: [A, C, B, D, E]</span><br><span class="line">是否包含<span class="string">"B"</span>:<span class="keyword">true</span></span><br><span class="line">remove(<span class="number">3</span>)后: [A, C, B, E]</span><br><span class="line">list集合是空的:<span class="keyword">false</span></span><br><span class="line">替换前:[A, C, B, E]</span><br><span class="line">替换后:[A, F, B, E]</span><br><span class="line">[]</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）遍历集合"   >          <a href="#（2）遍历集合" class="heading-link"><i class="fas fa-link"></i></a>（2）遍历集合</h3>      <p>集合最常用的操作之一是遍历，遍历就是将集合中的每一个元素取出来，进行操作或计算。List集合遍历有三种方法:<br>01. 使用for循环遍历:List集合可以使用for循环进行遍历，for循环中有循环变量，通过循环变量可<br>以访问List集合中的元素。<br>02. 使用for-each循环遍历:for-each循环是针对遍历各种类型集合而推出的，笔者推荐使用这种遍历<br>方法。<br>03. 使用迭代器遍历:Java提供了多种迭代器，List集合可以使用Iterator和ListIterator迭代器。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.list集合遍历;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">//       向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"C"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"D"</span>);</span><br><span class="line">        list.add(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//        for循环遍历集合</span></span><br><span class="line">        System.out.println(<span class="string">"--1.使用for循环遍历--"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line"><span class="comment">//            System.out.println(list.get(i));</span></span><br><span class="line">            System.out.printf(<span class="string">"读取集合元素(%d): %s \n"</span>, i, list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.使用for-each循环遍历</span></span><br><span class="line">        System.out.println(<span class="string">"--2.使用for-each循环遍历--"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object items:list)&#123;</span><br><span class="line">            String s = (String) items;</span><br><span class="line">            System.out.println(<span class="string">"读取集合元素："</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.使用迭代器遍历</span></span><br><span class="line">        System.out.println(<span class="string">"--3.使用迭代器遍历--"</span>);</span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object items = iterator.next();</span><br><span class="line">            String s = (String)items;</span><br><span class="line">            System.out.println(<span class="string">"读取集合元素："</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[A, B, C, B, D, E]</span><br><span class="line">--<span class="number">1</span>.使用<span class="keyword">for</span>循环遍历--</span><br><span class="line">读取集合元素(<span class="number">0</span>): A </span><br><span class="line">读取集合元素(<span class="number">1</span>): B </span><br><span class="line">读取集合元素(<span class="number">2</span>): C </span><br><span class="line">读取集合元素(<span class="number">3</span>): B </span><br><span class="line">读取集合元素(<span class="number">4</span>): D </span><br><span class="line">读取集合元素(<span class="number">5</span>): E </span><br><span class="line">--<span class="number">2</span>.使用<span class="keyword">for</span>-each循环遍历--</span><br><span class="line">读取集合元素：A</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：C</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：D</span><br><span class="line">读取集合元素：E</span><br><span class="line">--<span class="number">3</span>.使用迭代器遍历--</span><br><span class="line">读取集合元素：A</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：C</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：D</span><br><span class="line">读取集合元素：E</span><br></pre></td></tr></table></div></figure>        <h2 id="二、Set集合"   >          <a href="#二、Set集合" class="heading-link"><i class="fas fa-link"></i></a>二、Set集合</h2>      <p>Set集合是由一串无序的，不能重复的相同类型元素构成的集合。List集合强调的是有序，Set集合强调的是不重复。当不考虑顺序，且没有重复元素时，Set集合和List集 合可以互相替换的。Set接口直接实现类主要是HashSet，HashSet是基于散列表数据结构的实现。</p>        <h3 id="（1）常用方法-1"   >          <a href="#（1）常用方法-1" class="heading-link"><i class="fas fa-link"></i></a>（1）常用方法</h3>      <p>Set接口也继承自Collection接口，Set接口中大部分都是继承自Collection接口，这些方法如下。<br>01. 操作元素<br>add(Object element):在Set集合的尾部添加指定的元素。该方法是从Collection集合继承过来的。<br>remove(Object element):如果Set集合中存在指定元素，则从Set集合中移除该元素。该方法是从Collection集合继承过来的。<br>clear():从Set集合中移除所有元素。该方法是从Collection集合继承过来的。<br>02. 判断元素<br>isEmpty():判断Set集合中是否有元素，没有返回true，有返回false。该方法是从 Collection集合继承过来的。<br>contains(Object element):判断Set集合中是否包含指定元素，包含返回true，不包含返回 false。该方法是从Collection集合继承过来的。<br>03. 其他<br>iterator():返回迭代器(Iterator)对象，迭代器对象用于遍历集合。该方法是从Collection<br>集合继承过来的。<br>size():返回Set集合中的元素数，返回值是int类型。该方法是从Collection集合继承过来的。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set集合：无序，不重复</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">// 向集合中添加元素</span></span><br><span class="line">        set.add(<span class="string">"A"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"C"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"D"</span>);</span><br><span class="line">        set.add(<span class="string">"E"</span>);</span><br><span class="line"><span class="comment">//        打印集合个数</span></span><br><span class="line">        System.out.println(<span class="string">"集合size = "</span>+set.size());</span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"><span class="comment">//       删除集合中的B元素</span></span><br><span class="line">        set.remove(b);</span><br><span class="line"><span class="comment">//        判断集合中是否包含"B"元素</span></span><br><span class="line">        System.out.println(<span class="string">"判断是否包含B元素"</span>+set.contains(b));</span><br><span class="line"><span class="comment">//        判断集合是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"判断集合是否为空"</span>+set.isEmpty());</span><br><span class="line"><span class="comment">//        清空集合</span></span><br><span class="line">        set.clear();</span><br><span class="line">        <span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">集合size = <span class="number">5</span></span><br><span class="line">[A, B, C, D, E]</span><br><span class="line">判断是否包含B元素<span class="keyword">false</span></span><br><span class="line">判断集合是否为空<span class="keyword">false</span></span><br><span class="line">[]</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）遍历集合-1"   >          <a href="#（2）遍历集合-1" class="heading-link"><i class="fas fa-link"></i></a>（2）遍历集合</h3>      <p>Set集合中的元素由于没有序号，所以不能使用for循环进行遍历，但可以使用for-each循环和迭代器进 行遍历。事实上这两种遍历方法也是继承自Collection集合，也就是说所有的Collection集合类型都有这 两种遍历方式。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianli</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">// 向集合中添加元素</span></span><br><span class="line">        set.add(<span class="string">"A"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"C"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"D"</span>);</span><br><span class="line">        set.add(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"><span class="comment">//        1，使用增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">"--1，使用增强for遍历--"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object item : set)&#123;</span><br><span class="line">            String s = (String)item;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        2.使用迭代器遍历集合</span></span><br><span class="line">        System.out.println(<span class="string">"--2.使用迭代器遍历集合--"</span>);</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object item  = iterator.next();</span><br><span class="line">            String s = (String)item;</span><br><span class="line">            System.out.println(<span class="string">"读取集合"</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[A, B, C, D, E]</span><br><span class="line">--<span class="number">1</span>，使用增强<span class="keyword">for</span>遍历--</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">E</span><br><span class="line">--<span class="number">2</span>.使用迭代器遍历集合--</span><br><span class="line">读取集合A</span><br><span class="line">读取集合B</span><br><span class="line">读取集合C</span><br><span class="line">读取集合D</span><br><span class="line">读取集合E</span><br></pre></td></tr></table></div></figure>        <h2 id="三、Map集合"   >          <a href="#三、Map集合" class="heading-link"><i class="fas fa-link"></i></a>三、Map集合</h2>      <p>Map(映射)集合表示一种非常复杂的集合，允许按照某个键来访问元素。Map集合是由两个集合构 成的，一个是键(key)集合，一个是值(value)集合。键集合是Set类型，因此不能有重复的元素。 而值集合是Collection类型，可以有重复的元素。Map集合中的键和值是成对出现的。Map接口直接实现类主要是HashMap，HashMap是基于散列表数据结构的实现。</p>        <h3 id="（1）常用方法-2"   >          <a href="#（1）常用方法-2" class="heading-link"><i class="fas fa-link"></i></a>（1）常用方法</h3>      <p>Map集合中包含两个集合(键和值)，所以操作起来比较麻烦，Map接口提供很多方法用来管理和操 作集合。主要的方法如下。<br>01. 操作元素<br>get(Object key):返回指定键所对应的值;如果Map集合中不包含该键值对，则返回null。 put(Object key, Object value):指定键值对添加到集合中。<br>remove(Object key):移除键值对。<br>clear():移除Map集合中所有键值对。<br>02. 判断元素<br>isEmpty():判断Map集合中是否有键值对，没有返回true，有返回false。<br>containsKey(Object key):判断键集合中是否包含指定元素，包含返回true，不包含返回false。<br>containsValue(Object value):判断值集合中是否包含指定元素，包含返回true，不包含返回false。<br>03. 查看集合<br>keySet():返回Map中的所有键集合，返回值是Set类型。<br>values():返回Map中的所有值集合，返回值是Collection类型。<br>size():返回Map集合中键值对数。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.map集合;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="number">101</span>,<span class="string">"A"</span>);</span><br><span class="line">        map.put(<span class="number">102</span>, <span class="string">"B"</span>);</span><br><span class="line">        map.put(<span class="number">103</span>, <span class="string">"C"</span>);</span><br><span class="line">        map.put(<span class="number">104</span>, <span class="string">"D"</span>);</span><br><span class="line"><span class="comment">//        B重复</span></span><br><span class="line">        map.put(<span class="number">105</span>, <span class="string">"B"</span>);</span><br><span class="line"><span class="comment">//把102的值换成E</span></span><br><span class="line">        map.put(<span class="number">102</span>, <span class="string">"E"</span>);</span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        打印集合元素个数</span></span><br><span class="line">        System.out.println(<span class="string">"集合size="</span>+map.size());</span><br><span class="line"><span class="comment">//        通过键取值</span></span><br><span class="line">        System.out.println(<span class="string">"102-"</span>+map.get(<span class="number">102</span>));</span><br><span class="line">        System.out.println(<span class="string">"105-"</span>+map.get(<span class="number">105</span>));</span><br><span class="line"><span class="comment">//        删除键值对</span></span><br><span class="line">        map.remove(<span class="number">102</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        判断集合中是否包含105</span></span><br><span class="line">        System.out.println(<span class="string">"集合中是否包含102"</span>+map.containsKey(<span class="number">105</span>));</span><br><span class="line"><span class="comment">//        集合中是否包含"A"</span></span><br><span class="line">        System.out.println(<span class="string">"集合中是否包含A"</span>+map.containsValue(<span class="string">"A"</span>));</span><br><span class="line"><span class="comment">//        判断集合是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"集合是否为空"</span>+map.isEmpty());</span><br><span class="line"><span class="comment">//        清空集合</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">101</span>=A, <span class="number">102</span>=E, <span class="number">103</span>=C, <span class="number">104</span>=D, <span class="number">105</span>=B&#125;</span><br><span class="line">集合size=<span class="number">5</span></span><br><span class="line"><span class="number">102</span>-E</span><br><span class="line"><span class="number">105</span>-B</span><br><span class="line">&#123;<span class="number">101</span>=A, <span class="number">103</span>=C, <span class="number">104</span>=D, <span class="number">105</span>=B&#125;</span><br><span class="line">集合中是否包含<span class="number">102</span><span class="keyword">true</span></span><br><span class="line">集合中是否包含Atrue</span><br><span class="line">集合是否为空<span class="keyword">false</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）遍历集合-2"   >          <a href="#（2）遍历集合-2" class="heading-link"><i class="fas fa-link"></i></a>（2）遍历集合</h3>      <p>Map集合遍历与List和Set集合不同，Map有两个集合，因此遍历时可以只遍历值的集合，也可以只遍历键的集合，也可以同时遍历。这些遍历过程都可以使用for-each循环和迭代器进行遍历。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.map集合遍历;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapbianli</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="number">101</span>,<span class="string">"A"</span>);</span><br><span class="line">        map.put(<span class="number">102</span>, <span class="string">"B"</span>);</span><br><span class="line">        map.put(<span class="number">103</span>, <span class="string">"C"</span>);</span><br><span class="line">        map.put(<span class="number">104</span>, <span class="string">"D"</span>);</span><br><span class="line"><span class="comment">//        使用增强for循环遍历</span></span><br><span class="line">        System.out.println(<span class="string">"使用增强for循环遍历"</span>);</span><br><span class="line"><span class="comment">//        获得键集合</span></span><br><span class="line">        Set keys  = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key:keys)&#123;</span><br><span class="line"><span class="comment">//            自动拆箱</span></span><br><span class="line">            <span class="keyword">int</span> ikey = (Integer) key;</span><br><span class="line"><span class="comment">//            自动装箱</span></span><br><span class="line">            String value = (String)map.get(ikey);</span><br><span class="line">            System.out.printf(<span class="string">"key=%d-value=%s \n"</span>,ikey,value);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        使用迭代器遍历集合</span></span><br><span class="line">        System.out.println(<span class="string">"使用迭代器遍历集合"</span>);</span><br><span class="line"><span class="comment">//        获得值集合</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line"><span class="comment">//        遍历值集合</span></span><br><span class="line">        Iterator iterator = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object item = iterator.next();</span><br><span class="line">            String s = (String)item;</span><br><span class="line">            System.out.println(<span class="string">"集合元素集合:"</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用增强<span class="keyword">for</span>循环遍历</span><br><span class="line">key=<span class="number">101</span>-value=A </span><br><span class="line">key=<span class="number">102</span>-value=B </span><br><span class="line">key=<span class="number">103</span>-value=C </span><br><span class="line">key=<span class="number">104</span>-value=D </span><br><span class="line">使用迭代器遍历集合</span><br><span class="line">集合元素集合:A</span><br><span class="line">集合元素集合:B</span><br><span class="line">集合元素集合:C</span><br><span class="line">集合元素集合:D</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、集合简介&quot;   &gt;
          &lt;a href=&quot;#一、集合简介&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;一、集合简介&lt;/h2&gt;
      &lt;p&gt;集合本质是基于某种数据结构数据容器。常见的数据结构:数组(Array)、集(Set)、队列 (Queue)、链表(Linkedlist)、树(Tree)、堆(Heap)、栈(Stack)和映射(Map)等结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础语法" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题实现线程的几种方式？</title>
    <link href="http://yoursite.com/posts/3425737821/"/>
    <id>http://yoursite.com/posts/3425737821/</id>
    <published>2020-06-08T11:40:36.000Z</published>
    <updated>2020-06-08T13:52:12.119Z</updated>
    
    <content type="html"><![CDATA[<p>在Java面试中面试官常常会问这样一道面试题：Java面试题实现线程的几种方式？<br>这道题看似简单也会难道很多人，下面总结一些实现线程的几种方式。</p><a id="more"></a> <p>第一种：通过实现Runnable接口<br>创建步骤：</p><ul><li>1、通过实现Runnable接口创建线程执行类 </li><li>2、通过重写Runnable中的run方法，编写线程执行代码</li><li>3、创建线程Thread对象，将线程执行对象传递给它 </li><li>4、开始线程</li></ul><p>第二种：通过继承Thread线程类<br>创建步骤：</p><ul><li><p>1、通过继承Thread线程类创建线程执行类 </p></li><li><p>2、定义构造方法，通过super调用父类Thread构造方法 这两个Thread类<br>构造方法:</p><p>Thread(String name):name为线程指定一个名字。<br>Thread():线程名字是JVM分配的。</p></li><li><p>3、通过重写Thread中的run方法，编写线程执行代码 </p></li><li><p>4、创建线程执行对象，将参数传递给它 </p></li><li><p>5、开始线程</p></li></ul><p>示例代码：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方案一：</span></span><br><span class="line">        DogThread dogThread = <span class="keyword">new</span> DogThread();</span><br><span class="line">        dogThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方案二：</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> CatRunnable());</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用内部类写法</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"cat eat"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用lambda表达式写法</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"cat eat"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog eat</span><br><span class="line">cat eat</span><br><span class="line">cat eat</span><br><span class="line">cat eat</span><br></pre></td></tr></table></div></figure><p>关于线程的更多知识点见这篇文章<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_45366499/article/details/104346644"  target="_blank" rel="noopener">https://blog.csdn.net/weixin_45366499/article/details/104346644</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java面试中面试官常常会问这样一道面试题：Java面试题实现线程的几种方式？&lt;br&gt;这道题看似简单也会难道很多人，下面总结一些实现线程的几种方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java面试指南" scheme="http://yoursite.com/categories/Java%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
