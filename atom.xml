<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex&#39;s Blog</title>
  
  <subtitle>write code and love life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-08T14:08:19.174Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>caizhengjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java集合详解</title>
    <link href="http://yoursite.com/posts/1169821274/"/>
    <id>http://yoursite.com/posts/1169821274/</id>
    <published>2020-06-08T13:53:14.000Z</published>
    <updated>2020-06-08T14:08:19.174Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="一、集合简介"   >          <a href="#一、集合简介" class="heading-link"><i class="fas fa-link"></i></a>一、集合简介</h2>      <p>集合本质是基于某种数据结构数据容器。常见的数据结构:数组(Array)、集(Set)、队列 (Queue)、链表(Linkedlist)、树(Tree)、堆(Heap)、栈(Stack)和映射(Map)等结构。</p><a id="more"></a> <p>Java中提供了丰富的集合接口和类，它们来自于java.util包。如图所示是Java主要的集合接口和 类，从图中可见Java集合类型分为:Collection和Map，Collection子接口有:Set、Queue和List等接口。 每一种集合接口描述了一种数据结构。<br><img   src="https://img-blog.csdnimg.cn/20200210174542205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70" style="width: image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,tepx;height: t_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQpx;"  alt="在这里插入图片描述"><br>在Java SE中List名称的类型有两个，一个是java.util.List，另外一个是java.awt.List。 java.util.List是一个接口，而java.awt.List是一个类，用于图形用户界面开 发，它是一个图形界面中的组件。学习Java中的集合，首先从两大接口入手，重点掌握List、Set和Map三个接口，熟悉这些接 口中提供的方法。然后再熟悉这些接口的实现类，并了解不同实现类之间的区别。</p>        <h2 id="二、List集合"   >          <a href="#二、List集合" class="heading-link"><i class="fas fa-link"></i></a>二、List集合</h2>      <p>List集合中的元素是有序的，可以重复出现。List接口的实现类有:ArrayList 和 LinkedList。ArrayList是基于动态数组数据结构的实现，LinkedList 是基于链表数据结构的实现。ArrayList访问元素速度优于LinkedList，LinkedList占用的内存空间比较 大，但LinkedList在批量插入或删除数据时优于ArrayList。</p>        <h3 id="（1）常用方法"   >          <a href="#（1）常用方法" class="heading-link"><i class="fas fa-link"></i></a>（1）常用方法</h3>      <p>List接口继承自Collection接口，List接口中的很多方法都继承自Collection接口的。List接口中常用方法如下。<br>01. 操作元素<br>get(int index):返回List集合中指定位置的元素。<br>set(int index, Object element):用指定元素替换List集合中指定位置的元素。<br>add(Object element):在List集合的尾部添加指定的元素。该方法是从Collection集合继承 过来的。<br>add(int index, Object element):在List集合的指定位置插入指定元素。 remove(int index):移除List集合中指定位置的元素。<br>remove(Object element):如果List集合中存在指定元素，则从List集合中移除第一次出现的 指定元素。该方法是从Collection集合继承过来的。<br>clear():从List集合中移除所有元素。该方法是从Collection集合继承过来的。<br> 02. 判断元素<br>isEmpty():判断List集合中是否有元素，没有返回true，有返回false。该方法是从 Collection集合继承过来的。<br>contains(Object element):判断List集合中是否包含指定元素，包含返回true，不包含返回 false。该方法是从Collection集合继承过来的。<br>03. 查询元素<br>indexOf(Object o):从前往后查找List集合元素，返回第一次出现指定元素的索引，如果<br>此列表不包含该元素，则返回-1。<br>lastIndexOf(Object o):从后往前查找List集合元素，返回第一次出现指定元素的索引，如果此列表不包含该元素，则返回-1。<br>04. 其他<br>iterator():返回迭代器(Iterator)对象，迭代器对象用于遍历集合。该方法是从Collection 集合继承过来的。<br>size():返回List集合中的元素数，返回值是int类型。该方法是从Collection集合继承过来 的。<br>subList(int fromIndex, int toIndex):返回List集合中指定的 fromIndex(包括 )和 toIndex(不包括)之间的元素集合，返回值为List集合。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.list集合;</span><br><span class="line"><span class="keyword">import</span>java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//list集合：有序，重复</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">//       向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"C"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"D"</span>);</span><br><span class="line">        list.add(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        打印集合的元素个数</span></span><br><span class="line">        System.out.println(<span class="string">"集合 size = "</span>+list.size());</span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//从前往后查找b元素</span></span><br><span class="line">        System.out.println(<span class="string">"indexOf(\"B\") = "</span> +list.indexOf(b));</span><br><span class="line"><span class="comment">//       从后往前查找"B"元素</span></span><br><span class="line">        System.out.println(<span class="string">"lastindexOf(\"B\") = "</span> +list.lastIndexOf(b));</span><br><span class="line">        <span class="comment">//删除集合中第一个"B"元素</span></span><br><span class="line">        list.remove(b);</span><br><span class="line">        System.out.println(<span class="string">"remove(3)前: "</span>+list);</span><br><span class="line">        <span class="comment">//判断集合中是否包含"B"元素</span></span><br><span class="line">        System.out.println(<span class="string">"是否包含\"B\":"</span> + list.contains(b));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合第4个元素</span></span><br><span class="line">        list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"remove(3)后: "</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断集合是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"list集合是空的:"</span> + list.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"替换前:"</span> + list); <span class="comment">//替换集合第2个元素</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">"F"</span>);</span><br><span class="line">        System.out.println(<span class="string">"替换后:"</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空集合</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新添加元素</span></span><br><span class="line">        list.add(<span class="number">1</span>);<span class="comment">// 发生自动装箱</span></span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> item = (Integer)list.get(<span class="number">0</span>);<span class="comment">//发生自动拆箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">集合 size = <span class="number">6</span></span><br><span class="line">[A, B, C, B, D, E]</span><br><span class="line">indexOf(<span class="string">"B"</span>) = <span class="number">1</span></span><br><span class="line">lastindexOf(<span class="string">"B"</span>) = <span class="number">3</span></span><br><span class="line">remove(<span class="number">3</span>)前: [A, C, B, D, E]</span><br><span class="line">是否包含<span class="string">"B"</span>:<span class="keyword">true</span></span><br><span class="line">remove(<span class="number">3</span>)后: [A, C, B, E]</span><br><span class="line">list集合是空的:<span class="keyword">false</span></span><br><span class="line">替换前:[A, C, B, E]</span><br><span class="line">替换后:[A, F, B, E]</span><br><span class="line">[]</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）遍历集合"   >          <a href="#（2）遍历集合" class="heading-link"><i class="fas fa-link"></i></a>（2）遍历集合</h3>      <p>集合最常用的操作之一是遍历，遍历就是将集合中的每一个元素取出来，进行操作或计算。List集合遍历有三种方法:<br>01. 使用for循环遍历:List集合可以使用for循环进行遍历，for循环中有循环变量，通过循环变量可<br>以访问List集合中的元素。<br>02. 使用for-each循环遍历:for-each循环是针对遍历各种类型集合而推出的，笔者推荐使用这种遍历<br>方法。<br>03. 使用迭代器遍历:Java提供了多种迭代器，List集合可以使用Iterator和ListIterator迭代器。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.list集合遍历;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">//       向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"A"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"C"</span>);</span><br><span class="line">        list.add(b);</span><br><span class="line">        list.add(<span class="string">"D"</span>);</span><br><span class="line">        list.add(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//        for循环遍历集合</span></span><br><span class="line">        System.out.println(<span class="string">"--1.使用for循环遍历--"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line"><span class="comment">//            System.out.println(list.get(i));</span></span><br><span class="line">            System.out.printf(<span class="string">"读取集合元素(%d): %s \n"</span>, i, list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.使用for-each循环遍历</span></span><br><span class="line">        System.out.println(<span class="string">"--2.使用for-each循环遍历--"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object items:list)&#123;</span><br><span class="line">            String s = (String) items;</span><br><span class="line">            System.out.println(<span class="string">"读取集合元素："</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.使用迭代器遍历</span></span><br><span class="line">        System.out.println(<span class="string">"--3.使用迭代器遍历--"</span>);</span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object items = iterator.next();</span><br><span class="line">            String s = (String)items;</span><br><span class="line">            System.out.println(<span class="string">"读取集合元素："</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[A, B, C, B, D, E]</span><br><span class="line">--<span class="number">1</span>.使用<span class="keyword">for</span>循环遍历--</span><br><span class="line">读取集合元素(<span class="number">0</span>): A </span><br><span class="line">读取集合元素(<span class="number">1</span>): B </span><br><span class="line">读取集合元素(<span class="number">2</span>): C </span><br><span class="line">读取集合元素(<span class="number">3</span>): B </span><br><span class="line">读取集合元素(<span class="number">4</span>): D </span><br><span class="line">读取集合元素(<span class="number">5</span>): E </span><br><span class="line">--<span class="number">2</span>.使用<span class="keyword">for</span>-each循环遍历--</span><br><span class="line">读取集合元素：A</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：C</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：D</span><br><span class="line">读取集合元素：E</span><br><span class="line">--<span class="number">3</span>.使用迭代器遍历--</span><br><span class="line">读取集合元素：A</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：C</span><br><span class="line">读取集合元素：B</span><br><span class="line">读取集合元素：D</span><br><span class="line">读取集合元素：E</span><br></pre></td></tr></table></div></figure>        <h2 id="二、Set集合"   >          <a href="#二、Set集合" class="heading-link"><i class="fas fa-link"></i></a>二、Set集合</h2>      <p>Set集合是由一串无序的，不能重复的相同类型元素构成的集合。List集合强调的是有序，Set集合强调的是不重复。当不考虑顺序，且没有重复元素时，Set集合和List集 合可以互相替换的。Set接口直接实现类主要是HashSet，HashSet是基于散列表数据结构的实现。</p>        <h3 id="（1）常用方法-1"   >          <a href="#（1）常用方法-1" class="heading-link"><i class="fas fa-link"></i></a>（1）常用方法</h3>      <p>Set接口也继承自Collection接口，Set接口中大部分都是继承自Collection接口，这些方法如下。<br>01. 操作元素<br>add(Object element):在Set集合的尾部添加指定的元素。该方法是从Collection集合继承过来的。<br>remove(Object element):如果Set集合中存在指定元素，则从Set集合中移除该元素。该方法是从Collection集合继承过来的。<br>clear():从Set集合中移除所有元素。该方法是从Collection集合继承过来的。<br>02. 判断元素<br>isEmpty():判断Set集合中是否有元素，没有返回true，有返回false。该方法是从 Collection集合继承过来的。<br>contains(Object element):判断Set集合中是否包含指定元素，包含返回true，不包含返回 false。该方法是从Collection集合继承过来的。<br>03. 其他<br>iterator():返回迭代器(Iterator)对象，迭代器对象用于遍历集合。该方法是从Collection<br>集合继承过来的。<br>size():返回Set集合中的元素数，返回值是int类型。该方法是从Collection集合继承过来的。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set集合：无序，不重复</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">// 向集合中添加元素</span></span><br><span class="line">        set.add(<span class="string">"A"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"C"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"D"</span>);</span><br><span class="line">        set.add(<span class="string">"E"</span>);</span><br><span class="line"><span class="comment">//        打印集合个数</span></span><br><span class="line">        System.out.println(<span class="string">"集合size = "</span>+set.size());</span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"><span class="comment">//       删除集合中的B元素</span></span><br><span class="line">        set.remove(b);</span><br><span class="line"><span class="comment">//        判断集合中是否包含"B"元素</span></span><br><span class="line">        System.out.println(<span class="string">"判断是否包含B元素"</span>+set.contains(b));</span><br><span class="line"><span class="comment">//        判断集合是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"判断集合是否为空"</span>+set.isEmpty());</span><br><span class="line"><span class="comment">//        清空集合</span></span><br><span class="line">        set.clear();</span><br><span class="line">        <span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">集合size = <span class="number">5</span></span><br><span class="line">[A, B, C, D, E]</span><br><span class="line">判断是否包含B元素<span class="keyword">false</span></span><br><span class="line">判断集合是否为空<span class="keyword">false</span></span><br><span class="line">[]</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）遍历集合-1"   >          <a href="#（2）遍历集合-1" class="heading-link"><i class="fas fa-link"></i></a>（2）遍历集合</h3>      <p>Set集合中的元素由于没有序号，所以不能使用for循环进行遍历，但可以使用for-each循环和迭代器进 行遍历。事实上这两种遍历方法也是继承自Collection集合，也就是说所有的Collection集合类型都有这 两种遍历方式。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianli</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        String b = <span class="string">"B"</span>;</span><br><span class="line"><span class="comment">// 向集合中添加元素</span></span><br><span class="line">        set.add(<span class="string">"A"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"C"</span>);</span><br><span class="line">        set.add(b);</span><br><span class="line">        set.add(<span class="string">"D"</span>);</span><br><span class="line">        set.add(<span class="string">"E"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"><span class="comment">//        1，使用增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">"--1，使用增强for遍历--"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object item : set)&#123;</span><br><span class="line">            String s = (String)item;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        2.使用迭代器遍历集合</span></span><br><span class="line">        System.out.println(<span class="string">"--2.使用迭代器遍历集合--"</span>);</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object item  = iterator.next();</span><br><span class="line">            String s = (String)item;</span><br><span class="line">            System.out.println(<span class="string">"读取集合"</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[A, B, C, D, E]</span><br><span class="line">--<span class="number">1</span>，使用增强<span class="keyword">for</span>遍历--</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">E</span><br><span class="line">--<span class="number">2</span>.使用迭代器遍历集合--</span><br><span class="line">读取集合A</span><br><span class="line">读取集合B</span><br><span class="line">读取集合C</span><br><span class="line">读取集合D</span><br><span class="line">读取集合E</span><br></pre></td></tr></table></div></figure>        <h2 id="三、Map集合"   >          <a href="#三、Map集合" class="heading-link"><i class="fas fa-link"></i></a>三、Map集合</h2>      <p>Map(映射)集合表示一种非常复杂的集合，允许按照某个键来访问元素。Map集合是由两个集合构 成的，一个是键(key)集合，一个是值(value)集合。键集合是Set类型，因此不能有重复的元素。 而值集合是Collection类型，可以有重复的元素。Map集合中的键和值是成对出现的。Map接口直接实现类主要是HashMap，HashMap是基于散列表数据结构的实现。</p>        <h3 id="（1）常用方法-2"   >          <a href="#（1）常用方法-2" class="heading-link"><i class="fas fa-link"></i></a>（1）常用方法</h3>      <p>Map集合中包含两个集合(键和值)，所以操作起来比较麻烦，Map接口提供很多方法用来管理和操 作集合。主要的方法如下。<br>01. 操作元素<br>get(Object key):返回指定键所对应的值;如果Map集合中不包含该键值对，则返回null。 put(Object key, Object value):指定键值对添加到集合中。<br>remove(Object key):移除键值对。<br>clear():移除Map集合中所有键值对。<br>02. 判断元素<br>isEmpty():判断Map集合中是否有键值对，没有返回true，有返回false。<br>containsKey(Object key):判断键集合中是否包含指定元素，包含返回true，不包含返回false。<br>containsValue(Object value):判断值集合中是否包含指定元素，包含返回true，不包含返回false。<br>03. 查看集合<br>keySet():返回Map中的所有键集合，返回值是Set类型。<br>values():返回Map中的所有值集合，返回值是Collection类型。<br>size():返回Map集合中键值对数。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.map集合;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="number">101</span>,<span class="string">"A"</span>);</span><br><span class="line">        map.put(<span class="number">102</span>, <span class="string">"B"</span>);</span><br><span class="line">        map.put(<span class="number">103</span>, <span class="string">"C"</span>);</span><br><span class="line">        map.put(<span class="number">104</span>, <span class="string">"D"</span>);</span><br><span class="line"><span class="comment">//        B重复</span></span><br><span class="line">        map.put(<span class="number">105</span>, <span class="string">"B"</span>);</span><br><span class="line"><span class="comment">//把102的值换成E</span></span><br><span class="line">        map.put(<span class="number">102</span>, <span class="string">"E"</span>);</span><br><span class="line"><span class="comment">//        打印集合</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        打印集合元素个数</span></span><br><span class="line">        System.out.println(<span class="string">"集合size="</span>+map.size());</span><br><span class="line"><span class="comment">//        通过键取值</span></span><br><span class="line">        System.out.println(<span class="string">"102-"</span>+map.get(<span class="number">102</span>));</span><br><span class="line">        System.out.println(<span class="string">"105-"</span>+map.get(<span class="number">105</span>));</span><br><span class="line"><span class="comment">//        删除键值对</span></span><br><span class="line">        map.remove(<span class="number">102</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        判断集合中是否包含105</span></span><br><span class="line">        System.out.println(<span class="string">"集合中是否包含102"</span>+map.containsKey(<span class="number">105</span>));</span><br><span class="line"><span class="comment">//        集合中是否包含"A"</span></span><br><span class="line">        System.out.println(<span class="string">"集合中是否包含A"</span>+map.containsValue(<span class="string">"A"</span>));</span><br><span class="line"><span class="comment">//        判断集合是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"集合是否为空"</span>+map.isEmpty());</span><br><span class="line"><span class="comment">//        清空集合</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">101</span>=A, <span class="number">102</span>=E, <span class="number">103</span>=C, <span class="number">104</span>=D, <span class="number">105</span>=B&#125;</span><br><span class="line">集合size=<span class="number">5</span></span><br><span class="line"><span class="number">102</span>-E</span><br><span class="line"><span class="number">105</span>-B</span><br><span class="line">&#123;<span class="number">101</span>=A, <span class="number">103</span>=C, <span class="number">104</span>=D, <span class="number">105</span>=B&#125;</span><br><span class="line">集合中是否包含<span class="number">102</span><span class="keyword">true</span></span><br><span class="line">集合中是否包含Atrue</span><br><span class="line">集合是否为空<span class="keyword">false</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="（2）遍历集合-2"   >          <a href="#（2）遍历集合-2" class="heading-link"><i class="fas fa-link"></i></a>（2）遍历集合</h3>      <p>Map集合遍历与List和Set集合不同，Map有两个集合，因此遍历时可以只遍历值的集合，也可以只遍历键的集合，也可以同时遍历。这些遍历过程都可以使用for-each循环和迭代器进行遍历。<br>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 集合.map集合遍历;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapbianli</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="number">101</span>,<span class="string">"A"</span>);</span><br><span class="line">        map.put(<span class="number">102</span>, <span class="string">"B"</span>);</span><br><span class="line">        map.put(<span class="number">103</span>, <span class="string">"C"</span>);</span><br><span class="line">        map.put(<span class="number">104</span>, <span class="string">"D"</span>);</span><br><span class="line"><span class="comment">//        使用增强for循环遍历</span></span><br><span class="line">        System.out.println(<span class="string">"使用增强for循环遍历"</span>);</span><br><span class="line"><span class="comment">//        获得键集合</span></span><br><span class="line">        Set keys  = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key:keys)&#123;</span><br><span class="line"><span class="comment">//            自动拆箱</span></span><br><span class="line">            <span class="keyword">int</span> ikey = (Integer) key;</span><br><span class="line"><span class="comment">//            自动装箱</span></span><br><span class="line">            String value = (String)map.get(ikey);</span><br><span class="line">            System.out.printf(<span class="string">"key=%d-value=%s \n"</span>,ikey,value);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        使用迭代器遍历集合</span></span><br><span class="line">        System.out.println(<span class="string">"使用迭代器遍历集合"</span>);</span><br><span class="line"><span class="comment">//        获得值集合</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line"><span class="comment">//        遍历值集合</span></span><br><span class="line">        Iterator iterator = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object item = iterator.next();</span><br><span class="line">            String s = (String)item;</span><br><span class="line">            System.out.println(<span class="string">"集合元素集合:"</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用增强<span class="keyword">for</span>循环遍历</span><br><span class="line">key=<span class="number">101</span>-value=A </span><br><span class="line">key=<span class="number">102</span>-value=B </span><br><span class="line">key=<span class="number">103</span>-value=C </span><br><span class="line">key=<span class="number">104</span>-value=D </span><br><span class="line">使用迭代器遍历集合</span><br><span class="line">集合元素集合:A</span><br><span class="line">集合元素集合:B</span><br><span class="line">集合元素集合:C</span><br><span class="line">集合元素集合:D</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、集合简介&quot;   &gt;
          &lt;a href=&quot;#一、集合简介&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;一、集合简介&lt;/h2&gt;
      &lt;p&gt;集合本质是基于某种数据结构数据容器。常见的数据结构:数组(Array)、集(Set)、队列 (Queue)、链表(Linkedlist)、树(Tree)、堆(Heap)、栈(Stack)和映射(Map)等结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础语法" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题实现线程的几种方式？</title>
    <link href="http://yoursite.com/posts/3425737821/"/>
    <id>http://yoursite.com/posts/3425737821/</id>
    <published>2020-06-08T11:40:36.000Z</published>
    <updated>2020-06-08T13:52:12.119Z</updated>
    
    <content type="html"><![CDATA[<p>在Java面试中面试官常常会问这样一道面试题：Java面试题实现线程的几种方式？<br>这道题看似简单也会难道很多人，下面总结一些实现线程的几种方式。</p><a id="more"></a> <p>第一种：通过实现Runnable接口<br>创建步骤：</p><ul><li>1、通过实现Runnable接口创建线程执行类 </li><li>2、通过重写Runnable中的run方法，编写线程执行代码</li><li>3、创建线程Thread对象，将线程执行对象传递给它 </li><li>4、开始线程</li></ul><p>第二种：通过继承Thread线程类<br>创建步骤：</p><ul><li><p>1、通过继承Thread线程类创建线程执行类 </p></li><li><p>2、定义构造方法，通过super调用父类Thread构造方法 这两个Thread类<br>构造方法:</p><p>Thread(String name):name为线程指定一个名字。<br>Thread():线程名字是JVM分配的。</p></li><li><p>3、通过重写Thread中的run方法，编写线程执行代码 </p></li><li><p>4、创建线程执行对象，将参数传递给它 </p></li><li><p>5、开始线程</p></li></ul><p>示例代码：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方案一：</span></span><br><span class="line">        DogThread dogThread = <span class="keyword">new</span> DogThread();</span><br><span class="line">        dogThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方案二：</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> CatRunnable());</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用内部类写法</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"cat eat"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用lambda表达式写法</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"cat eat"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog eat</span><br><span class="line">cat eat</span><br><span class="line">cat eat</span><br><span class="line">cat eat</span><br></pre></td></tr></table></div></figure><p>关于线程的更多知识点见这篇文章<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_45366499/article/details/104346644"  target="_blank" rel="noopener">https://blog.csdn.net/weixin_45366499/article/details/104346644</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java面试中面试官常常会问这样一道面试题：Java面试题实现线程的几种方式？&lt;br&gt;这道题看似简单也会难道很多人，下面总结一些实现线程的几种方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java面试指南" scheme="http://yoursite.com/categories/Java%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
